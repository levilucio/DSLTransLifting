<?xml version="1.0" encoding="UTF-8"?>
<dsltrans:TransformationModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dsltrans="http://dsltrans/2.0">
  <source xsi:type="dsltrans:FilePort" name="inputModel" filePathURI="tests\t13\input.xmi">
    <metaModelId metaModelURI="tests\t13\java5.ecore" metaModelName="Java5.Java5"/>
  </source>
  <source xsi:type="dsltrans:Sequential" name="output1" description="JavaElements" previousSource="//@source.0">
    <metaModelId metaModelURI="tests\t13\text.ecore" metaModelName="Text.Text"/>
    <hasRule description="Java5 Project Model">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Model" packageName="Java5" className="Model">
          <attribute attributeName="name" description="The Java project name"/>
        </class>
      </match>
      <apply>
        <class description="Text.Model" packageName="Text" className="Model">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="Model"/>
          </attribute>
        </class>
        <class description="Text.Directory" packageName="Text" className="Directory">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="project"/>
          </attribute>
          <attribute attributeName="path">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.0/@match.0/@class.0/@attribute.0"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="project"/>
          </attribute>
        </class>
        <association associationName="directory" source="//@source.1/@hasRule.0/@apply/@class.0" target="//@source.1/@hasRule.0/@apply/@class.1"/>
      </apply>
    </hasRule>
    <hasRule description="Package Declaration">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PackageDeclaration" packageName="Java5" className="PackageDeclaration">
          <attribute attributeName="name"/>
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
      </match>
      <apply>
        <class description="Text.Directory" packageName="Text" className="Directory">
          <attribute attributeName="path">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.1/@match.0/@class.0/@attribute.0"/>
          </attribute>
          <attribute attributeName="">
            <attributeValue xsi:type="dsltrans:Atom" value="Directory"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="AbstractTypeDeclaration">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AbstractTypeDeclaration" packageName="Java5" className="AbstractTypeDeclaration">
          <attribute attributeName="proxy"/>
        </class>
      </match>
      <apply>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="typedef"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="typedef"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="typeDeclaration"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="typeDeclaration"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="implementSet"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="implementSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" {"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodBlock"/>
          </attribute>
          <attribute attributeName="tabbed">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="methodBlock"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fieldBlock"/>
          </attribute>
          <attribute attributeName="tabbed">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="fieldBlock"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="innerTypeDefinitionBlock"/>
          </attribute>
          <attribute attributeName="tabbed">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="innerTypeDefinitionBlock"/>
          </attribute>
        </class>
        <class description="Text.Block (for EnumDeclarations)" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="enumConstBlock"/>
          </attribute>
          <attribute attributeName="tabbed">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="enumConstBlock"/>
          </attribute>
        </class>
        <association associationName="preLine" source="//@source.1/@hasRule.2/@apply/@class.0" target="//@source.1/@hasRule.2/@apply/@class.1"/>
        <association associationName="next" source="//@source.1/@hasRule.2/@apply/@class.1" target="//@source.1/@hasRule.2/@apply/@class.2"/>
        <association associationName="next" source="//@source.1/@hasRule.2/@apply/@class.2" target="//@source.1/@hasRule.2/@apply/@class.3"/>
        <association associationName="next" source="//@source.1/@hasRule.2/@apply/@class.3" target="//@source.1/@hasRule.2/@apply/@class.4"/>
        <association associationName="innerBlock" source="//@source.1/@hasRule.2/@apply/@class.0" target="//@source.1/@hasRule.2/@apply/@class.7"/>
        <association associationName="innerBlock" source="//@source.1/@hasRule.2/@apply/@class.0" target="//@source.1/@hasRule.2/@apply/@class.5"/>
        <association associationName="innerBlock" source="//@source.1/@hasRule.2/@apply/@class.0" target="//@source.1/@hasRule.2/@apply/@class.6"/>
        <association associationName="innerBlock" source="//@source.1/@hasRule.2/@apply/@class.0" target="//@source.1/@hasRule.2/@apply/@class.8"/>
      </apply>
    </hasRule>
    <hasRule description="Import ends in package">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PackageDeclaration" packageName="Java5" className="PackageDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ImportDeclaration" packageName="Java5" className="ImportDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="element" source="//@source.1/@hasRule.3/@match.0/@class.1" target="//@source.1/@hasRule.3/@match.0/@class.0"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="importedElement" source="//@source.1/@hasRule.3/@match.0/@class.2" target="//@source.1/@hasRule.3/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=".*;"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="importTermination"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="importTermination"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="Import ends in typedeclaration">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ImportDeclaration" packageName="Java5" className="ImportDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AbstractTypeDeclaration" packageName="Java5" className="AbstractTypeDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="importedElement" source="//@source.1/@hasRule.4/@match.0/@class.0" target="//@source.1/@hasRule.4/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="element" source="//@source.1/@hasRule.4/@match.0/@class.1" target="//@source.1/@hasRule.4/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="importTermination"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="importTermination"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="Variable Declarations">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclaration" packageName="Java5" className="VariableDeclaration">
          <attribute attributeName="name"/>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="variableDeclaration"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.5/@match.0/@class.0/@attribute.0"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="variableDeclaration"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="Statement">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Statement" packageName="Java5" className="Statement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="MethodInvocation">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodInvocation" packageName="Java5" className="MethodInvocation"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodName"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="methodName"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="objectSender"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="objectSender"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="("/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=")"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.1/@hasRule.7/@apply/@class.0" target="//@source.1/@hasRule.7/@apply/@class.2"/>
        <association associationName="next" source="//@source.1/@hasRule.7/@apply/@class.2" target="//@source.1/@hasRule.7/@apply/@class.1"/>
        <association associationName="next" source="//@source.1/@hasRule.7/@apply/@class.1" target="//@source.1/@hasRule.7/@apply/@class.3"/>
        <association associationName="next" source="//@source.1/@hasRule.7/@apply/@class.3" target="//@source.1/@hasRule.7/@apply/@class.4"/>
      </apply>
    </hasRule>
    <hasRule description="ClassInstanceCreation">
      <match>
        <class xsi:type="dsltrans:NegativeMatchClass" description="Java5.AnonymousClassDeclaration" packageName="Java5" className="AnonymousClassDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ClassInstanceCreation" packageName="Java5" className="ClassInstanceCreation"/>
        <association xsi:type="dsltrans:NegativeMatchAssociation" associationName="anonymousClassDeclaration" source="//@source.1/@hasRule.8/@match.0/@class.1" target="//@source.1/@hasRule.8/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodName"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="methodName"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="("/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=")"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="new "/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.1/@hasRule.8/@apply/@class.1" target="//@source.1/@hasRule.8/@apply/@class.2"/>
        <association associationName="next" source="//@source.1/@hasRule.8/@apply/@class.2" target="//@source.1/@hasRule.8/@apply/@class.3"/>
        <association associationName="content" source="//@source.1/@hasRule.8/@apply/@class.0" target="//@source.1/@hasRule.8/@apply/@class.4"/>
        <association associationName="content" source="//@source.1/@hasRule.8/@apply/@class.4" target="//@source.1/@hasRule.8/@apply/@class.1"/>
      </apply>
    </hasRule>
    <hasRule description="ClassInstanceCreation Anonymous">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ClassInstanceCreation" packageName="Java5" className="ClassInstanceCreation"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AnonymousClassDeclaration" packageName="Java5" className="AnonymousClassDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="anonymousClassDeclaration" source="//@source.1/@hasRule.9/@match.0/@class.0" target="//@source.1/@hasRule.9/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="typeName"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="typeName"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="("/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=")"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="new "/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodBlock"/>
          </attribute>
          <attribute attributeName="tabbed">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="methodBlock"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="{"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="}"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fieldBlock"/>
          </attribute>
          <attribute attributeName="tabbed">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="fieldBlock"/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.1/@hasRule.9/@apply/@class.1" target="//@source.1/@hasRule.9/@apply/@class.2"/>
        <association associationName="next" source="//@source.1/@hasRule.9/@apply/@class.2" target="//@source.1/@hasRule.9/@apply/@class.3"/>
        <association associationName="content" source="//@source.1/@hasRule.9/@apply/@class.0" target="//@source.1/@hasRule.9/@apply/@class.4"/>
        <association associationName="content" source="//@source.1/@hasRule.9/@apply/@class.4" target="//@source.1/@hasRule.9/@apply/@class.1"/>
        <association associationName="innerBlock" source="//@source.1/@hasRule.9/@apply/@class.3" target="//@source.1/@hasRule.9/@apply/@class.5"/>
        <association associationName="preLine" source="//@source.1/@hasRule.9/@apply/@class.5" target="//@source.1/@hasRule.9/@apply/@class.7"/>
        <association associationName="innerBlock" source="//@source.1/@hasRule.9/@apply/@class.5" target="//@source.1/@hasRule.9/@apply/@class.9"/>
        <association associationName="postLine" source="//@source.1/@hasRule.9/@apply/@class.5" target="//@source.1/@hasRule.9/@apply/@class.8"/>
        <association associationName="innerBlock" source="//@source.1/@hasRule.9/@apply/@class.5" target="//@source.1/@hasRule.9/@apply/@class.6"/>
      </apply>
    </hasRule>
    <hasRule description="Named References">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElement" packageName="Java5" className="NamedElement">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="element" source="//@source.1/@hasRule.10/@match.0/@class.1" target="//@source.1/@hasRule.10/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.10/@match.0/@class.0/@attribute.0"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="Reference"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="Reference"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="NullLiteral">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NullLiteral" packageName="Java5" className="NullLiteral"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="null"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="StringLiteral">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.StringLiteral" packageName="Java5" className="StringLiteral">
          <attribute attributeName="escapedValue"/>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.12/@match.0/@class.0/@attribute.0"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="CharacterLiteral">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.CharacterLiteral" packageName="Java5" className="CharacterLiteral">
          <attribute attributeName="escapedValue"/>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.13/@match.0/@class.0/@attribute.0"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="BooleanLiteralTrue">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.BooleanLiteral" packageName="Java5" className="BooleanLiteral">
          <attribute attributeName="value">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="BooleanLiteralFalse">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.BooleanLiteral" packageName="Java5" className="BooleanLiteral">
          <attribute attributeName="value">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="NumberLiteral">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NumberLiteral" packageName="Java5" className="NumberLiteral">
          <attribute attributeName="tokenValue"/>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.16/@match.0/@class.0/@attribute.0"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="TypeLiteral">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.TypeLiteral" packageName="Java5" className="TypeLiteral"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="TypeLiteral"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="class"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="TypeLiteral"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="PrefixExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PrefixExpression" packageName="Java5" className="PrefixExpression">
          <attribute attributeName="operator"/>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.18/@match.0/@class.0/@attribute.0"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="PrefixExpression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="PrefixExpression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="PostfixExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PostfixExpression" packageName="Java5" className="PostfixExpression">
          <attribute attributeName="operator"/>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.19/@match.0/@class.0/@attribute.0"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="PostfixExpression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="PostfixExpression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="InfixExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.InfixExpression" packageName="Java5" className="InfixExpression">
          <attribute attributeName="operator"/>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:Atom" value=" "/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.20/@match.0/@class.0/@attribute.0"/>
                <rightTerm xsi:type="dsltrans:Atom" value=" "/>
              </rightTerm>
            </attributeValue>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="InfixExpression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="InfixExpression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="CastExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.CastExpression" packageName="Java5" className="CastExpression"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="ThisExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ThisExpression" packageName="Java5" className="ThisExpression"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="ThisExpression"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="this"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ThisExpression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="Assignment">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Assignment" packageName="Java5" className="Assignment">
          <attribute attributeName="operator"/>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:Atom" value=" "/>
              <rightTerm xsi:type="dsltrans:Concat">
                <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.1/@hasRule.23/@match.0/@class.0/@attribute.0"/>
                <rightTerm xsi:type="dsltrans:Atom" value=" "/>
              </rightTerm>
            </attributeValue>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="AssignmentExpression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="AssignmentExpression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="ConditionalExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ConditionalExpression" packageName="Java5" className="ConditionalExpression"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="VariableDeclarationExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationExpression" packageName="Java5" className="VariableDeclarationExpression"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fieldType"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="fieldType"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentSet"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" "/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.1/@hasRule.25/@apply/@class.0" target="//@source.1/@hasRule.25/@apply/@class.1"/>
        <association associationName="next" source="//@source.1/@hasRule.25/@apply/@class.1" target="//@source.1/@hasRule.25/@apply/@class.2"/>
        <association associationName="next" source="//@source.1/@hasRule.25/@apply/@class.2" target="//@source.1/@hasRule.25/@apply/@class.3"/>
      </apply>
    </hasRule>
    <hasRule description="ParenthesizedExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ParenthesizedExpression" packageName="Java5" className="ParenthesizedExpression"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="InstanceofExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.InstanceofExpression" packageName="Java5" className="InstanceofExpression"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" name="output2" description="Java Element Relations" previousSource="//@source.1">
    <metaModelId metaModelURI="tests\t13\text.ecore" metaModelName="Text.Text"/>
    <hasRule description="Directory structure">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PackageDeclaration" packageName="Java5" className="PackageDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PackageDeclaration" packageName="Java5" className="PackageDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="ownedPackages" source="//@source.2/@hasRule.0/@match.0/@class.0" target="//@source.2/@hasRule.0/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Directory" packageName="Text" className="Directory"/>
        <class description="Text.Directory" packageName="Text" className="Directory"/>
        <association associationName="directory" source="//@source.2/@hasRule.0/@apply/@class.0" target="//@source.2/@hasRule.0/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.0/@apply/@class.0" sourceClass="//@source.2/@hasRule.0/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.0/@apply/@class.1" sourceClass="//@source.2/@hasRule.0/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Project directory structure">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Model" packageName="Java5" className="Model"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PackageDeclaration" packageName="Java5" className="PackageDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="ownedElements" source="//@source.2/@hasRule.1/@match.0/@class.0" target="//@source.2/@hasRule.1/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Directory" packageName="Text" className="Directory"/>
        <class description="Text.Directory" packageName="Text" className="Directory"/>
        <association associationName="directory" source="//@source.2/@hasRule.1/@apply/@class.0" target="//@source.2/@hasRule.1/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.1/@apply/@class.0" sourceClass="//@source.2/@hasRule.1/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.1/@apply/@class.1" sourceClass="//@source.2/@hasRule.1/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Type declaration methods">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodDeclaration" packageName="Java5" className="MethodDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.TypeDeclaration" packageName="Java5" className="TypeDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="bodyDeclarations" source="//@source.2/@hasRule.2/@match.0/@class.1" target="//@source.2/@hasRule.2/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodBlock"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodDeclaration"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="methodDeclaration"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <class description="Text.EmptyLine" packageName="Text" className="EmptyLine"/>
        <class description="Text.EmptyLine" packageName="Text" className="EmptyLine"/>
        <association associationName="innerBlock" source="//@source.2/@hasRule.2/@apply/@class.0" target="//@source.2/@hasRule.2/@apply/@class.2"/>
        <association associationName="preLine" source="//@source.2/@hasRule.2/@apply/@class.2" target="//@source.2/@hasRule.2/@apply/@class.3"/>
        <association associationName="postLine" source="//@source.2/@hasRule.2/@apply/@class.2" target="//@source.2/@hasRule.2/@apply/@class.4"/>
        <association associationName="innerLine" source="//@source.2/@hasRule.2/@apply/@class.2" target="//@source.2/@hasRule.2/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.2/@apply/@class.0" sourceClass="//@source.2/@hasRule.2/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="ExpressionStatement">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ExpressionStatement" packageName="Java5" className="ExpressionStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.2/@hasRule.3/@match.0/@class.0" target="//@source.2/@hasRule.3/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.2/@hasRule.3/@apply/@class.0" target="//@source.2/@hasRule.3/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.3/@apply/@class.0" sourceClass="//@source.2/@hasRule.3/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.3/@apply/@class.1" sourceClass="//@source.2/@hasRule.3/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Type declaration fields">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.FieldDeclaration" packageName="Java5" className="FieldDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AbstractTypeDeclaration" packageName="Java5" className="AbstractTypeDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="bodyDeclarations" source="//@source.2/@hasRule.4/@match.0/@class.1" target="//@source.2/@hasRule.4/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fieldBlock"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <class description="Text.EmptyLine" packageName="Text" className="EmptyLine"/>
        <association associationName="next" source="//@source.2/@hasRule.4/@apply/@class.1" target="//@source.2/@hasRule.4/@apply/@class.2"/>
        <association associationName="preLine" source="//@source.2/@hasRule.4/@apply/@class.0" target="//@source.2/@hasRule.4/@apply/@class.3"/>
        <association associationName="innerLine" source="//@source.2/@hasRule.4/@apply/@class.0" target="//@source.2/@hasRule.4/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.4/@apply/@class.0" sourceClass="//@source.2/@hasRule.4/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Reference to Reference">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="qualifier" source="//@source.2/@hasRule.5/@match.0/@class.0" target="//@source.2/@hasRule.5/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="Reference"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="Reference"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="."/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.2/@hasRule.5/@apply/@class.1" target="//@source.2/@hasRule.5/@apply/@class.2"/>
        <association associationName="content" source="//@source.2/@hasRule.5/@apply/@class.2" target="//@source.2/@hasRule.5/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.5/@apply/@class.0" sourceClass="//@source.2/@hasRule.5/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.5/@apply/@class.1" sourceClass="//@source.2/@hasRule.5/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Single Reference">
      <match>
        <class xsi:type="dsltrans:NegativeMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:NegativeMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <association xsi:type="dsltrans:NegativeMatchAssociation" associationName="qualifier" source="//@source.2/@hasRule.6/@match.0/@class.2" target="//@source.2/@hasRule.6/@match.0/@class.0"/>
        <association xsi:type="dsltrans:NegativeMatchAssociation" associationName="qualifier" source="//@source.2/@hasRule.6/@match.0/@class.1" target="//@source.2/@hasRule.6/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="Reference"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.2/@hasRule.6/@apply/@class.1" target="//@source.2/@hasRule.6/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.6/@apply/@class.0" sourceClass="//@source.2/@hasRule.6/@match.0/@class.2"/>
    </hasRule>
    <hasRule description="Multi Reference">
      <match>
        <class xsi:type="dsltrans:NegativeMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:NegativeMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <association xsi:type="dsltrans:NegativeMatchAssociation" associationName="qualifier" source="//@source.2/@hasRule.7/@match.0/@class.2" target="//@source.2/@hasRule.7/@match.0/@class.0"/>
        <association xsi:type="dsltrans:NegativeMatchAssociation" associationName="qualifier" source="//@source.2/@hasRule.7/@match.0/@class.1" target="//@source.2/@hasRule.7/@match.0/@class.3"/>
        <association xsi:type="dsltrans:PositiveIndirectAssociation" source="//@source.2/@hasRule.7/@match.0/@class.3" target="//@source.2/@hasRule.7/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="Reference"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.2/@hasRule.7/@apply/@class.1" target="//@source.2/@hasRule.7/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.7/@apply/@class.0" sourceClass="//@source.2/@hasRule.7/@match.0/@class.2"/>
    </hasRule>
    <hasRule description="VariableDeclarationStatement">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationStatement" packageName="Java5" className="VariableDeclarationStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fieldType"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="fieldType"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentSet"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" "/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.2/@hasRule.8/@apply/@class.0" target="//@source.2/@hasRule.8/@apply/@class.1"/>
        <association associationName="next" source="//@source.2/@hasRule.8/@apply/@class.1" target="//@source.2/@hasRule.8/@apply/@class.2"/>
        <association associationName="next" source="//@source.2/@hasRule.8/@apply/@class.2" target="//@source.2/@hasRule.8/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.8/@apply/@class.0" sourceClass="//@source.2/@hasRule.8/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ReturnStatement">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ReturnStatement" packageName="Java5" className="ReturnStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="returnExpression"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="return"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="returnExpression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.2/@hasRule.9/@apply/@class.0" target="//@source.2/@hasRule.9/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.9/@apply/@class.0" sourceClass="//@source.2/@hasRule.9/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="BlockStatement">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Block" packageName="Java5" className="Block"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
          <attribute attributeName="tabbed">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="{"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="}"/>
          </attribute>
        </class>
        <association associationName="innerBlock" source="//@source.2/@hasRule.10/@apply/@class.0" target="//@source.2/@hasRule.10/@apply/@class.2"/>
        <association associationName="preLine" source="//@source.2/@hasRule.10/@apply/@class.2" target="//@source.2/@hasRule.10/@apply/@class.3"/>
        <association associationName="postLine" source="//@source.2/@hasRule.10/@apply/@class.2" target="//@source.2/@hasRule.10/@apply/@class.4"/>
        <association associationName="innerBlock" source="//@source.2/@hasRule.10/@apply/@class.2" target="//@source.2/@hasRule.10/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.10/@apply/@class.0" sourceClass="//@source.2/@hasRule.10/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="IfStatement">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.IfStatement" packageName="Java5" className="IfStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="if("/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="ifCondition"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ifCondition"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="ThenStatement"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ThenStatement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="ElseStatement"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="ElseStatement"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <association associationName="content" source="//@source.2/@hasRule.11/@apply/@class.0" target="//@source.2/@hasRule.11/@apply/@class.1"/>
        <association associationName="content" source="//@source.2/@hasRule.11/@apply/@class.1" target="//@source.2/@hasRule.11/@apply/@class.2"/>
        <association associationName="innerBlock" source="//@source.2/@hasRule.11/@apply/@class.0" target="//@source.2/@hasRule.11/@apply/@class.5"/>
        <association associationName="content" source="//@source.2/@hasRule.11/@apply/@class.5" target="//@source.2/@hasRule.11/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.11/@apply/@class.0" sourceClass="//@source.2/@hasRule.11/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="WhileStatement">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.WhileStatement" packageName="Java5" className="WhileStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="while("/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="whileCondition"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="whileCondition"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="whileStatement"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="whileStatement"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <association associationName="content" source="//@source.2/@hasRule.12/@apply/@class.0" target="//@source.2/@hasRule.12/@apply/@class.1"/>
        <association associationName="content" source="//@source.2/@hasRule.12/@apply/@class.1" target="//@source.2/@hasRule.12/@apply/@class.2"/>
        <association associationName="innerBlock" source="//@source.2/@hasRule.12/@apply/@class.0" target="//@source.2/@hasRule.12/@apply/@class.4"/>
        <association associationName="content" source="//@source.2/@hasRule.12/@apply/@class.4" target="//@source.2/@hasRule.12/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.12/@apply/@class.0" sourceClass="//@source.2/@hasRule.12/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ForStatement">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ForStatement" packageName="Java5" className="ForStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="for("/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="forCondition"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="forCondition"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="forStatement"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="forStatement"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <association associationName="content" source="//@source.2/@hasRule.13/@apply/@class.0" target="//@source.2/@hasRule.13/@apply/@class.1"/>
        <association associationName="content" source="//@source.2/@hasRule.13/@apply/@class.1" target="//@source.2/@hasRule.13/@apply/@class.2"/>
        <association associationName="innerBlock" source="//@source.2/@hasRule.13/@apply/@class.0" target="//@source.2/@hasRule.13/@apply/@class.4"/>
        <association associationName="content" source="//@source.2/@hasRule.13/@apply/@class.4" target="//@source.2/@hasRule.13/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.13/@apply/@class.0" sourceClass="//@source.2/@hasRule.13/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="BreakStatement">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.BreakStatement" packageName="Java5" className="BreakStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="break"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.2/@hasRule.14/@apply/@class.0" target="//@source.2/@hasRule.14/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.14/@apply/@class.0" sourceClass="//@source.2/@hasRule.14/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ContinueStatement">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ContinueStatement" packageName="Java5" className="ContinueStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="continue"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.2/@hasRule.15/@apply/@class.0" target="//@source.2/@hasRule.15/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.15/@apply/@class.0" sourceClass="//@source.2/@hasRule.15/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="DoStatement">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.DoStatement" packageName="Java5" className="DoStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="while("/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="doCondition"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="doCondition"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="doStatement"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="doStatement"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="do"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <association associationName="content" source="//@source.2/@hasRule.16/@apply/@class.0" target="//@source.2/@hasRule.16/@apply/@class.5"/>
        <association associationName="content" source="//@source.2/@hasRule.16/@apply/@class.1" target="//@source.2/@hasRule.16/@apply/@class.2"/>
        <association associationName="innerBlock" source="//@source.2/@hasRule.16/@apply/@class.0" target="//@source.2/@hasRule.16/@apply/@class.4"/>
        <association associationName="content" source="//@source.2/@hasRule.16/@apply/@class.4" target="//@source.2/@hasRule.16/@apply/@class.3"/>
        <association associationName="preLine" source="//@source.2/@hasRule.16/@apply/@class.7" target="//@source.2/@hasRule.16/@apply/@class.1"/>
        <association associationName="next" source="//@source.2/@hasRule.16/@apply/@class.1" target="//@source.2/@hasRule.16/@apply/@class.6"/>
        <association associationName="innerBlock" source="//@source.2/@hasRule.16/@apply/@class.3" target="//@source.2/@hasRule.16/@apply/@class.7"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.16/@apply/@class.0" sourceClass="//@source.2/@hasRule.16/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="SwitchStatement">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.SwitchStatement" packageName="Java5" className="SwitchStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="switchCondition"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="switchCondition"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
          <attribute attributeName="tabbed">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="switch("/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="{"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="}"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.2/@hasRule.17/@apply/@class.0" target="//@source.2/@hasRule.17/@apply/@class.4"/>
        <association associationName="content" source="//@source.2/@hasRule.17/@apply/@class.4" target="//@source.2/@hasRule.17/@apply/@class.1"/>
        <association associationName="innerBlock" source="//@source.2/@hasRule.17/@apply/@class.0" target="//@source.2/@hasRule.17/@apply/@class.3"/>
        <association associationName="innerBlock" source="//@source.2/@hasRule.17/@apply/@class.3" target="//@source.2/@hasRule.17/@apply/@class.2"/>
        <association associationName="preLine" source="//@source.2/@hasRule.17/@apply/@class.3" target="//@source.2/@hasRule.17/@apply/@class.5"/>
        <association associationName="postLine" source="//@source.2/@hasRule.17/@apply/@class.3" target="//@source.2/@hasRule.17/@apply/@class.6"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.17/@apply/@class.0" sourceClass="//@source.2/@hasRule.17/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="SwitchCase Default">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.SwitchCase" packageName="Java5" className="SwitchCase">
          <attribute attributeName="default">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="default:"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.2/@hasRule.18/@apply/@class.0" target="//@source.2/@hasRule.18/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.18/@apply/@class.0" sourceClass="//@source.2/@hasRule.18/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="SwitchCase">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.SwitchCase" packageName="Java5" className="SwitchCase">
          <attribute attributeName="default">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="caseCondition"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="caseCondition"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="case "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.2/@hasRule.19/@apply/@class.0" target="//@source.2/@hasRule.19/@apply/@class.2"/>
        <association associationName="content" source="//@source.2/@hasRule.19/@apply/@class.2" target="//@source.2/@hasRule.19/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.19/@apply/@class.0" sourceClass="//@source.2/@hasRule.19/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ConstructorInvocation">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ConstructorInvocation" packageName="Java5" className="ConstructorInvocation"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="this("/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=")"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.2/@hasRule.20/@apply/@class.0" target="//@source.2/@hasRule.20/@apply/@class.1"/>
        <association associationName="content" source="//@source.2/@hasRule.20/@apply/@class.2" target="//@source.2/@hasRule.20/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.20/@apply/@class.2" sourceClass="//@source.2/@hasRule.20/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="SuperConstructorInvocation">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.SuperConstructorInvocation" packageName="Java5" className="SuperConstructorInvocation"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="super("/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=")"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.2/@hasRule.21/@apply/@class.0" target="//@source.2/@hasRule.21/@apply/@class.1"/>
        <association associationName="content" source="//@source.2/@hasRule.21/@apply/@class.2" target="//@source.2/@hasRule.21/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.21/@apply/@class.2" sourceClass="//@source.2/@hasRule.21/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="AnonymousClassDeclaration methods">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodDeclaration" packageName="Java5" className="MethodDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AnonymousClassDeclaration" packageName="Java5" className="AnonymousClassDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="bodyDeclarations" source="//@source.2/@hasRule.22/@match.0/@class.1" target="//@source.2/@hasRule.22/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodBlock"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodDeclaration"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="methodDeclaration"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <class description="Text.EmptyLine" packageName="Text" className="EmptyLine"/>
        <class description="Text.EmptyLine" packageName="Text" className="EmptyLine"/>
        <association associationName="innerBlock" source="//@source.2/@hasRule.22/@apply/@class.0" target="//@source.2/@hasRule.22/@apply/@class.2"/>
        <association associationName="preLine" source="//@source.2/@hasRule.22/@apply/@class.2" target="//@source.2/@hasRule.22/@apply/@class.3"/>
        <association associationName="postLine" source="//@source.2/@hasRule.22/@apply/@class.2" target="//@source.2/@hasRule.22/@apply/@class.4"/>
        <association associationName="innerLine" source="//@source.2/@hasRule.22/@apply/@class.2" target="//@source.2/@hasRule.22/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.22/@apply/@class.0" sourceClass="//@source.2/@hasRule.22/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="AnonymousClassDeclaration fields">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.FieldDeclaration" packageName="Java5" className="FieldDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AnonymousClassDeclaration" packageName="Java5" className="AnonymousClassDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="bodyDeclarations" source="//@source.2/@hasRule.23/@match.0/@class.1" target="//@source.2/@hasRule.23/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fieldBlock"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <class description="Text.EmptyLine" packageName="Text" className="EmptyLine"/>
        <association associationName="next" source="//@source.2/@hasRule.23/@apply/@class.1" target="//@source.2/@hasRule.23/@apply/@class.2"/>
        <association associationName="preLine" source="//@source.2/@hasRule.23/@apply/@class.0" target="//@source.2/@hasRule.23/@apply/@class.3"/>
        <association associationName="innerLine" source="//@source.2/@hasRule.23/@apply/@class.0" target="//@source.2/@hasRule.23/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.23/@apply/@class.0" sourceClass="//@source.2/@hasRule.23/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Enum declaration constants starts">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.EnumConstantDeclaration" packageName="Java5" className="EnumConstantDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AbstractTypeDeclaration" packageName="Java5" className="AbstractTypeDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="enumConstants" source="//@source.2/@hasRule.24/@match.0/@class.1" target="//@source.2/@hasRule.24/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="enumConstBlock"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.2/@hasRule.24/@match.0/@class.0/@attribute.1"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="enumConstStart"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="enumConstStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <association associationName="innerLine" source="//@source.2/@hasRule.24/@apply/@class.0" target="//@source.2/@hasRule.24/@apply/@class.1"/>
        <association associationName="next" source="//@source.2/@hasRule.24/@apply/@class.1" target="//@source.2/@hasRule.24/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.24/@apply/@class.0" sourceClass="//@source.2/@hasRule.24/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="InnerType declarations">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AbstractTypeDeclaration" packageName="Java5" className="AbstractTypeDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AbstractTypeDeclaration" packageName="Java5" className="AbstractTypeDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="bodyDeclarations" source="//@source.2/@hasRule.25/@match.0/@class.1" target="//@source.2/@hasRule.25/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="innerTypeDefinitionBlock"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="typedef"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="};"/>
          </attribute>
        </class>
        <association associationName="innerBlock" source="//@source.2/@hasRule.25/@apply/@class.0" target="//@source.2/@hasRule.25/@apply/@class.1"/>
        <association associationName="postLine" source="//@source.2/@hasRule.25/@apply/@class.1" target="//@source.2/@hasRule.25/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.25/@apply/@class.0" sourceClass="//@source.2/@hasRule.25/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.25/@apply/@class.1" sourceClass="//@source.2/@hasRule.25/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="AbstractTypeDeclaration in File">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AbstractTypeDeclaration" packageName="Java5" className="AbstractTypeDeclaration">
          <attribute attributeName="name"/>
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PackageDeclaration" packageName="Java5" className="PackageDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="ownedElements" source="//@source.2/@hasRule.26/@match.0/@class.1" target="//@source.2/@hasRule.26/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.File" packageName="Text" className="File">
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="File"/>
          </attribute>
          <attribute attributeName="path">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.2/@hasRule.26/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Atom" value=".java"/>
            </attributeValue>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="main"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="main"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="importBlock"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="importBlock"/>
          </attribute>
        </class>
        <class description="Text.EmptyLine" packageName="Text" className="EmptyLine"/>
        <class description="Text.EmptyLine" packageName="Text" className="EmptyLine"/>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="typedef"/>
          </attribute>
        </class>
        <class description="Text.Directory" packageName="Text" className="Directory"/>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="}"/>
          </attribute>
        </class>
        <association associationName="innerBlock" source="//@source.2/@hasRule.26/@apply/@class.0" target="//@source.2/@hasRule.26/@apply/@class.1"/>
        <association associationName="innerBlock" source="//@source.2/@hasRule.26/@apply/@class.1" target="//@source.2/@hasRule.26/@apply/@class.2"/>
        <association associationName="preLine" source="//@source.2/@hasRule.26/@apply/@class.2" target="//@source.2/@hasRule.26/@apply/@class.3"/>
        <association associationName="postLine" source="//@source.2/@hasRule.26/@apply/@class.2" target="//@source.2/@hasRule.26/@apply/@class.4"/>
        <association associationName="innerBlock" source="//@source.2/@hasRule.26/@apply/@class.1" target="//@source.2/@hasRule.26/@apply/@class.5"/>
        <association associationName="file" source="//@source.2/@hasRule.26/@apply/@class.6" target="//@source.2/@hasRule.26/@apply/@class.0"/>
        <association associationName="postLine" source="//@source.2/@hasRule.26/@apply/@class.5" target="//@source.2/@hasRule.26/@apply/@class.7"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.26/@apply/@class.5" sourceClass="//@source.2/@hasRule.26/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.2/@hasRule.26/@apply/@class.6" sourceClass="//@source.2/@hasRule.26/@match.0/@class.1"/>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" name="output3" description="Literals, Constants, Expressions and Statements" previousSource="//@source.2">
    <metaModelId metaModelURI="tests\t13\text.ecore" metaModelName="Text.Text"/>
    <hasRule description="TypeLiteral">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.TypeLiteral" packageName="Java5" className="TypeLiteral"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.3/@hasRule.0/@match.0/@class.0" target="//@source.3/@hasRule.0/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="TypeLiteral"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="."/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.3/@hasRule.0/@apply/@class.2" target="//@source.3/@hasRule.0/@apply/@class.3"/>
        <association associationName="content" source="//@source.3/@hasRule.0/@apply/@class.1" target="//@source.3/@hasRule.0/@apply/@class.2"/>
        <association associationName="content" source="//@source.3/@hasRule.0/@apply/@class.3" target="//@source.3/@hasRule.0/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.0/@apply/@class.0" sourceClass="//@source.3/@hasRule.0/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.0/@apply/@class.2" sourceClass="//@source.3/@hasRule.0/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.0/@apply/@class.1" sourceClass="//@source.3/@hasRule.0/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="PrefixExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PrefixExpression" packageName="Java5" className="PrefixExpression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="operand" source="//@source.3/@hasRule.1/@match.0/@class.0" target="//@source.3/@hasRule.1/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="PrefixExpression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.3/@hasRule.1/@apply/@class.1" target="//@source.3/@hasRule.1/@apply/@class.0"/>
        <association associationName="next" source="//@source.3/@hasRule.1/@apply/@class.0" target="//@source.3/@hasRule.1/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.1/@apply/@class.0" sourceClass="//@source.3/@hasRule.1/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.1/@apply/@class.2" sourceClass="//@source.3/@hasRule.1/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.1/@apply/@class.1" sourceClass="//@source.3/@hasRule.1/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="PostfixExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PostfixExpression" packageName="Java5" className="PostfixExpression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="operand" source="//@source.3/@hasRule.2/@match.0/@class.0" target="//@source.3/@hasRule.2/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="PostfixExpression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.3/@hasRule.2/@apply/@class.1" target="//@source.3/@hasRule.2/@apply/@class.2"/>
        <association associationName="next" source="//@source.3/@hasRule.2/@apply/@class.2" target="//@source.3/@hasRule.2/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.2/@apply/@class.0" sourceClass="//@source.3/@hasRule.2/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.2/@apply/@class.2" sourceClass="//@source.3/@hasRule.2/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.2/@apply/@class.1" sourceClass="//@source.3/@hasRule.2/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="InfixExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.InfixExpression" packageName="Java5" className="InfixExpression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="rightOperand" source="//@source.3/@hasRule.3/@match.0/@class.0" target="//@source.3/@hasRule.3/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="leftOperand" source="//@source.3/@hasRule.3/@match.0/@class.0" target="//@source.3/@hasRule.3/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="InfixExpression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.3/@hasRule.3/@apply/@class.1" target="//@source.3/@hasRule.3/@apply/@class.3"/>
        <association associationName="next" source="//@source.3/@hasRule.3/@apply/@class.3" target="//@source.3/@hasRule.3/@apply/@class.0"/>
        <association associationName="next" source="//@source.3/@hasRule.3/@apply/@class.0" target="//@source.3/@hasRule.3/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.3/@apply/@class.0" sourceClass="//@source.3/@hasRule.3/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.3/@apply/@class.2" sourceClass="//@source.3/@hasRule.3/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.3/@apply/@class.3" sourceClass="//@source.3/@hasRule.3/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.3/@apply/@class.1" sourceClass="//@source.3/@hasRule.3/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="CastExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.CastExpression" packageName="Java5" className="CastExpression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.3/@hasRule.4/@match.0/@class.0" target="//@source.3/@hasRule.4/@match.0/@class.2"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.3/@hasRule.4/@match.0/@class.0" target="//@source.3/@hasRule.4/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="("/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=")"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.3/@hasRule.4/@apply/@class.0" target="//@source.3/@hasRule.4/@apply/@class.3"/>
        <association associationName="content" source="//@source.3/@hasRule.4/@apply/@class.3" target="//@source.3/@hasRule.4/@apply/@class.1"/>
        <association associationName="next" source="//@source.3/@hasRule.4/@apply/@class.1" target="//@source.3/@hasRule.4/@apply/@class.4"/>
        <association associationName="content" source="//@source.3/@hasRule.4/@apply/@class.4" target="//@source.3/@hasRule.4/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.4/@apply/@class.1" sourceClass="//@source.3/@hasRule.4/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.4/@apply/@class.2" sourceClass="//@source.3/@hasRule.4/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.4/@apply/@class.0" sourceClass="//@source.3/@hasRule.4/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ThisExpression with Qualifier">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ThisExpression" packageName="Java5" className="ThisExpression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="qualifier" source="//@source.3/@hasRule.5/@match.0/@class.0" target="//@source.3/@hasRule.5/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="ThisExpression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="."/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.3/@hasRule.5/@apply/@class.2" target="//@source.3/@hasRule.5/@apply/@class.3"/>
        <association associationName="content" source="//@source.3/@hasRule.5/@apply/@class.1" target="//@source.3/@hasRule.5/@apply/@class.2"/>
        <association associationName="content" source="//@source.3/@hasRule.5/@apply/@class.3" target="//@source.3/@hasRule.5/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.5/@apply/@class.0" sourceClass="//@source.3/@hasRule.5/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.5/@apply/@class.2" sourceClass="//@source.3/@hasRule.5/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.5/@apply/@class.1" sourceClass="//@source.3/@hasRule.5/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ThisExpression without Qualifier">
      <match>
        <class xsi:type="dsltrans:NegativeMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ThisExpression" packageName="Java5" className="ThisExpression"/>
        <association xsi:type="dsltrans:NegativeMatchAssociation" associationName="qualifier" source="//@source.3/@hasRule.6/@match.0/@class.1" target="//@source.3/@hasRule.6/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="ThisExpression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.3/@hasRule.6/@apply/@class.1" target="//@source.3/@hasRule.6/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.6/@apply/@class.0" sourceClass="//@source.3/@hasRule.6/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.6/@apply/@class.1" sourceClass="//@source.3/@hasRule.6/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Assignment">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Assignment" packageName="Java5" className="Assignment"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="rightHandSide" source="//@source.3/@hasRule.7/@match.0/@class.0" target="//@source.3/@hasRule.7/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="leftHandSide" source="//@source.3/@hasRule.7/@match.0/@class.0" target="//@source.3/@hasRule.7/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="AssignmentExpression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.3/@hasRule.7/@apply/@class.1" target="//@source.3/@hasRule.7/@apply/@class.3"/>
        <association associationName="next" source="//@source.3/@hasRule.7/@apply/@class.3" target="//@source.3/@hasRule.7/@apply/@class.0"/>
        <association associationName="next" source="//@source.3/@hasRule.7/@apply/@class.0" target="//@source.3/@hasRule.7/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.7/@apply/@class.0" sourceClass="//@source.3/@hasRule.7/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.7/@apply/@class.2" sourceClass="//@source.3/@hasRule.7/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.7/@apply/@class.3" sourceClass="//@source.3/@hasRule.7/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.7/@apply/@class.1" sourceClass="//@source.3/@hasRule.7/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ConditionalExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ConditionalExpression" packageName="Java5" className="ConditionalExpression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="thenExpression" source="//@source.3/@hasRule.8/@match.0/@class.0" target="//@source.3/@hasRule.8/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="elseExpression" source="//@source.3/@hasRule.8/@match.0/@class.0" target="//@source.3/@hasRule.8/@match.0/@class.2"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.3/@hasRule.8/@match.0/@class.0" target="//@source.3/@hasRule.8/@match.0/@class.3"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" ? "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" : "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.3/@hasRule.8/@apply/@class.1" target="//@source.3/@hasRule.8/@apply/@class.3"/>
        <association associationName="next" source="//@source.3/@hasRule.8/@apply/@class.3" target="//@source.3/@hasRule.8/@apply/@class.4"/>
        <association associationName="next" source="//@source.3/@hasRule.8/@apply/@class.0" target="//@source.3/@hasRule.8/@apply/@class.5"/>
        <association associationName="next" source="//@source.3/@hasRule.8/@apply/@class.4" target="//@source.3/@hasRule.8/@apply/@class.0"/>
        <association associationName="next" source="//@source.3/@hasRule.8/@apply/@class.5" target="//@source.3/@hasRule.8/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.8/@apply/@class.0" sourceClass="//@source.3/@hasRule.8/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.8/@apply/@class.2" sourceClass="//@source.3/@hasRule.8/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.8/@apply/@class.3" sourceClass="//@source.3/@hasRule.8/@match.0/@class.3"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.8/@apply/@class.1" sourceClass="//@source.3/@hasRule.8/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ParenthesizedExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ParenthesizedExpression" packageName="Java5" className="ParenthesizedExpression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.3/@hasRule.9/@match.0/@class.0" target="//@source.3/@hasRule.9/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="( "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" )"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.3/@hasRule.9/@apply/@class.1" target="//@source.3/@hasRule.9/@apply/@class.2"/>
        <association associationName="next" source="//@source.3/@hasRule.9/@apply/@class.0" target="//@source.3/@hasRule.9/@apply/@class.3"/>
        <association associationName="next" source="//@source.3/@hasRule.9/@apply/@class.2" target="//@source.3/@hasRule.9/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.9/@apply/@class.0" sourceClass="//@source.3/@hasRule.9/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.9/@apply/@class.1" sourceClass="//@source.3/@hasRule.9/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="InstanceofExpression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.InstanceofExpression" packageName="Java5" className="InstanceofExpression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="leftOperand" source="//@source.3/@hasRule.10/@match.0/@class.0" target="//@source.3/@hasRule.10/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="rightOperand" source="//@source.3/@hasRule.10/@match.0/@class.0" target="//@source.3/@hasRule.10/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" instanceof "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.3/@hasRule.10/@apply/@class.1" target="//@source.3/@hasRule.10/@apply/@class.0"/>
        <association associationName="next" source="//@source.3/@hasRule.10/@apply/@class.0" target="//@source.3/@hasRule.10/@apply/@class.2"/>
        <association associationName="next" source="//@source.3/@hasRule.10/@apply/@class.2" target="//@source.3/@hasRule.10/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.10/@apply/@class.0" sourceClass="//@source.3/@hasRule.10/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.10/@apply/@class.1" sourceClass="//@source.3/@hasRule.10/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.10/@apply/@class.3" sourceClass="//@source.3/@hasRule.10/@match.0/@class.2"/>
    </hasRule>
    <hasRule description="Enum declaration constants ends">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AbstractTypeDeclaration" packageName="Java5" className="AbstractTypeDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.EnumConstantDeclaration" packageName="Java5" className="EnumConstantDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="enumConstants" source="//@source.3/@hasRule.11/@match.0/@class.0" target="//@source.3/@hasRule.11/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="enumConstStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:Atom" value=", "/>
              <rightTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.3/@hasRule.11/@match.0/@class.1/@attribute.1"/>
            </attributeValue>
          </attribute>
        </class>
        <association associationName="content" source="//@source.3/@hasRule.11/@apply/@class.0" target="//@source.3/@hasRule.11/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.3/@hasRule.11/@apply/@class.0" sourceClass="//@source.3/@hasRule.11/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.3/@hasRule.11/@apply/@class.0" sourceClass="//@source.3/@hasRule.11/@match.0/@class.0"/>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" name="output4" description="Packages and Methods" previousSource="//@source.3">
    <metaModelId metaModelURI="tests\t13\text.ecore" metaModelName="Text.Text"/>
    <hasRule description="Package Name Element">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PackageDeclaration" packageName="Java5" className="PackageDeclaration">
          <attribute attributeName="name"/>
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AbstractTypeDeclaration" packageName="Java5" className="AbstractTypeDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveIndirectAssociation" source="//@source.4/@hasRule.0/@match.0/@class.0" target="//@source.4/@hasRule.0/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.0/@match.0/@class.0/@attribute.0"/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="packageName"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="packageName"/>
          </attribute>
        </class>
      </apply>
    </hasRule>
    <hasRule description="Type declaration methods">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodDeclaration" packageName="Java5" className="MethodDeclaration">
          <attribute attributeName="name"/>
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodDeclaration"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodReturnType"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="methodReturnType"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:Atom" value=" "/>
              <rightTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.4/@hasRule.1/@match.0/@class.0/@attribute.0"/>
            </attributeValue>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="parameterSet"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="("/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="parameterSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="parameterEnd"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=")"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="parameterEnd"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.1/@apply/@class.0" target="//@source.4/@hasRule.1/@apply/@class.1"/>
        <association associationName="next" source="//@source.4/@hasRule.1/@apply/@class.1" target="//@source.4/@hasRule.1/@apply/@class.2"/>
        <association associationName="next" source="//@source.4/@hasRule.1/@apply/@class.2" target="//@source.4/@hasRule.1/@apply/@class.3"/>
        <association associationName="content" source="//@source.4/@hasRule.1/@apply/@class.3" target="//@source.4/@hasRule.1/@apply/@class.4"/>
        <association associationName="next" source="//@source.4/@hasRule.1/@apply/@class.3" target="//@source.4/@hasRule.1/@apply/@class.5"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.1/@apply/@class.0" sourceClass="//@source.4/@hasRule.1/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="Type declaration field">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.FieldDeclaration" packageName="Java5" className="FieldDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fieldType"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="fieldType"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentSet"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" "/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.2/@apply/@class.0" target="//@source.4/@hasRule.2/@apply/@class.1"/>
        <association associationName="next" source="//@source.4/@hasRule.2/@apply/@class.1" target="//@source.4/@hasRule.2/@apply/@class.2"/>
        <association associationName="next" source="//@source.4/@hasRule.2/@apply/@class.2" target="//@source.4/@hasRule.2/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.2/@apply/@class.0" sourceClass="//@source.4/@hasRule.2/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="Variable Declarations">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclaration" packageName="Java5" className="VariableDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="initializer" source="//@source.4/@hasRule.3/@match.0/@class.0" target="//@source.4/@hasRule.3/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="variableDeclaration"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" = "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.3/@apply/@class.0" target="//@source.4/@hasRule.3/@apply/@class.2"/>
        <association associationName="next" source="//@source.4/@hasRule.3/@apply/@class.2" target="//@source.4/@hasRule.3/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.3/@apply/@class.1" sourceClass="//@source.4/@hasRule.3/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.3/@apply/@class.0" sourceClass="//@source.4/@hasRule.3/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ReturnStatement Expression">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ReturnStatement" packageName="Java5" className="ReturnStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.4/@hasRule.4/@match.0/@class.0" target="//@source.4/@hasRule.4/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="returnExpression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.4/@apply/@class.1" target="//@source.4/@hasRule.4/@apply/@class.0"/>
        <association associationName="content" source="//@source.4/@hasRule.4/@apply/@class.0" target="//@source.4/@hasRule.4/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.4/@apply/@class.2" sourceClass="//@source.4/@hasRule.4/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.4/@apply/@class.1" sourceClass="//@source.4/@hasRule.4/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="IfStatementCondition">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.IfStatement" packageName="Java5" className="IfStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.4/@hasRule.5/@match.0/@class.0" target="//@source.4/@hasRule.5/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="ifCondition"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=") "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.5/@apply/@class.0" target="//@source.4/@hasRule.5/@apply/@class.1"/>
        <association associationName="next" source="//@source.4/@hasRule.5/@apply/@class.1" target="//@source.4/@hasRule.5/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.5/@apply/@class.0" sourceClass="//@source.4/@hasRule.5/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.5/@apply/@class.1" sourceClass="//@source.4/@hasRule.5/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="IfStatementThenBlock">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.IfStatement" packageName="Java5" className="IfStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Block" packageName="Java5" className="Block"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="thenStatement" source="//@source.4/@hasRule.6/@match.0/@class.0" target="//@source.4/@hasRule.6/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="ThenStatement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="ElseStatement"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.6/@apply/@class.0" target="//@source.4/@hasRule.6/@apply/@class.1"/>
        <association associationName="next" source="//@source.4/@hasRule.6/@apply/@class.0" target="//@source.4/@hasRule.6/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.6/@apply/@class.0" sourceClass="//@source.4/@hasRule.6/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.6/@apply/@class.1" sourceClass="//@source.4/@hasRule.6/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.6/@apply/@class.2" sourceClass="//@source.4/@hasRule.6/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="IfStatementThenNoBlock">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.IfStatement" packageName="Java5" className="IfStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Statement" packageName="Java5" className="Statement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="thenStatement" source="//@source.4/@hasRule.7/@match.0/@class.0" target="//@source.4/@hasRule.7/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="ThenStatement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="tabbed">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <class description="Text.Content" packageName="Text" className="Content"/>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="ElseStatement"/>
          </attribute>
        </class>
        <association associationName="preLine" source="//@source.4/@hasRule.7/@apply/@class.3" target="//@source.4/@hasRule.7/@apply/@class.1"/>
        <association associationName="innerBlock" source="//@source.4/@hasRule.7/@apply/@class.0" target="//@source.4/@hasRule.7/@apply/@class.4"/>
        <association associationName="content" source="//@source.4/@hasRule.7/@apply/@class.4" target="//@source.4/@hasRule.7/@apply/@class.5"/>
        <association associationName="content" source="//@source.4/@hasRule.7/@apply/@class.4" target="//@source.4/@hasRule.7/@apply/@class.6"/>
        <association associationName="innerBlock" source="//@source.4/@hasRule.7/@apply/@class.5" target="//@source.4/@hasRule.7/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.4/@hasRule.7/@apply/@class.2" sourceClass="//@source.4/@hasRule.7/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.7/@apply/@class.0" sourceClass="//@source.4/@hasRule.7/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.7/@apply/@class.1" sourceClass="//@source.4/@hasRule.7/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.7/@apply/@class.6" sourceClass="//@source.4/@hasRule.7/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="IfStatementElseBlock">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.IfStatement" packageName="Java5" className="IfStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Block" packageName="Java5" className="Block"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="elseStatement" source="//@source.4/@hasRule.8/@match.0/@class.0" target="//@source.4/@hasRule.8/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="ElseStatement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="else "/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <association associationName="innerBlock" source="//@source.4/@hasRule.8/@apply/@class.0" target="//@source.4/@hasRule.8/@apply/@class.3"/>
        <association associationName="preLine" source="//@source.4/@hasRule.8/@apply/@class.3" target="//@source.4/@hasRule.8/@apply/@class.2"/>
        <association associationName="content" source="//@source.4/@hasRule.8/@apply/@class.3" target="//@source.4/@hasRule.8/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.8/@apply/@class.0" sourceClass="//@source.4/@hasRule.8/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.8/@apply/@class.1" sourceClass="//@source.4/@hasRule.8/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="IfStatementElseNoBlock">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.IfStatement" packageName="Java5" className="IfStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Statement" packageName="Java5" className="Statement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="elseStatement" source="//@source.4/@hasRule.9/@match.0/@class.0" target="//@source.4/@hasRule.9/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="ElseStatement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="tabbed">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="else "/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <association associationName="preLine" source="//@source.4/@hasRule.9/@apply/@class.3" target="//@source.4/@hasRule.9/@apply/@class.1"/>
        <association associationName="innerBlock" source="//@source.4/@hasRule.9/@apply/@class.4" target="//@source.4/@hasRule.9/@apply/@class.3"/>
        <association associationName="innerBlock" source="//@source.4/@hasRule.9/@apply/@class.0" target="//@source.4/@hasRule.9/@apply/@class.5"/>
        <association associationName="preLine" source="//@source.4/@hasRule.9/@apply/@class.5" target="//@source.4/@hasRule.9/@apply/@class.4"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.4/@hasRule.9/@apply/@class.2" sourceClass="//@source.4/@hasRule.9/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.9/@apply/@class.0" sourceClass="//@source.4/@hasRule.9/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.9/@apply/@class.1" sourceClass="//@source.4/@hasRule.9/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="WhileStatementCondition">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.WhileStatement" packageName="Java5" className="WhileStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.4/@hasRule.10/@match.0/@class.0" target="//@source.4/@hasRule.10/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="whileCondition"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=") "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.10/@apply/@class.0" target="//@source.4/@hasRule.10/@apply/@class.1"/>
        <association associationName="next" source="//@source.4/@hasRule.10/@apply/@class.1" target="//@source.4/@hasRule.10/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.10/@apply/@class.0" sourceClass="//@source.4/@hasRule.10/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.10/@apply/@class.1" sourceClass="//@source.4/@hasRule.10/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="WhileStatementBlock">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.WhileStatement" packageName="Java5" className="WhileStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Block" packageName="Java5" className="Block"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="body" source="//@source.4/@hasRule.11/@match.0/@class.0" target="//@source.4/@hasRule.11/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="whileStatement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.11/@apply/@class.0" target="//@source.4/@hasRule.11/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.11/@apply/@class.0" sourceClass="//@source.4/@hasRule.11/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.11/@apply/@class.1" sourceClass="//@source.4/@hasRule.11/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="WhileStatementNoBlock">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.WhileStatement" packageName="Java5" className="WhileStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Statement" packageName="Java5" className="Statement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="body" source="//@source.4/@hasRule.12/@match.0/@class.0" target="//@source.4/@hasRule.12/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="whileStatement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="tabbed">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <association associationName="preLine" source="//@source.4/@hasRule.12/@apply/@class.3" target="//@source.4/@hasRule.12/@apply/@class.1"/>
        <association associationName="innerBlock" source="//@source.4/@hasRule.12/@apply/@class.0" target="//@source.4/@hasRule.12/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.4/@hasRule.12/@apply/@class.2" sourceClass="//@source.4/@hasRule.12/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.12/@apply/@class.0" sourceClass="//@source.4/@hasRule.12/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.12/@apply/@class.1" sourceClass="//@source.4/@hasRule.12/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="ForStatementCondition">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ForStatement" packageName="Java5" className="ForStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.4/@hasRule.13/@match.0/@class.0" target="//@source.4/@hasRule.13/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="forCondition"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=") "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="initSet"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="initSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="; "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="; "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="updSet"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="updSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.13/@apply/@class.0" target="//@source.4/@hasRule.13/@apply/@class.3"/>
        <association associationName="next" source="//@source.4/@hasRule.13/@apply/@class.1" target="//@source.4/@hasRule.13/@apply/@class.5"/>
        <association associationName="next" source="//@source.4/@hasRule.13/@apply/@class.3" target="//@source.4/@hasRule.13/@apply/@class.4"/>
        <association associationName="next" source="//@source.4/@hasRule.13/@apply/@class.4" target="//@source.4/@hasRule.13/@apply/@class.1"/>
        <association associationName="next" source="//@source.4/@hasRule.13/@apply/@class.5" target="//@source.4/@hasRule.13/@apply/@class.6"/>
        <association associationName="next" source="//@source.4/@hasRule.13/@apply/@class.6" target="//@source.4/@hasRule.13/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.13/@apply/@class.0" sourceClass="//@source.4/@hasRule.13/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.13/@apply/@class.1" sourceClass="//@source.4/@hasRule.13/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="ForStatementBlock">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ForStatement" packageName="Java5" className="ForStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Block" packageName="Java5" className="Block"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="body" source="//@source.4/@hasRule.14/@match.0/@class.0" target="//@source.4/@hasRule.14/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="forStatement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.14/@apply/@class.0" target="//@source.4/@hasRule.14/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.14/@apply/@class.0" sourceClass="//@source.4/@hasRule.14/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.14/@apply/@class.1" sourceClass="//@source.4/@hasRule.14/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="ForStatementNoBlock">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ForStatement" packageName="Java5" className="ForStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Statement" packageName="Java5" className="Statement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="body" source="//@source.4/@hasRule.15/@match.0/@class.0" target="//@source.4/@hasRule.15/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="forStatement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="tabbed">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <association associationName="preLine" source="//@source.4/@hasRule.15/@apply/@class.3" target="//@source.4/@hasRule.15/@apply/@class.1"/>
        <association associationName="innerBlock" source="//@source.4/@hasRule.15/@apply/@class.0" target="//@source.4/@hasRule.15/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.4/@hasRule.15/@apply/@class.2" sourceClass="//@source.4/@hasRule.15/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.15/@apply/@class.0" sourceClass="//@source.4/@hasRule.15/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.15/@apply/@class.1" sourceClass="//@source.4/@hasRule.15/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="DoStatementCondition">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.DoStatement" packageName="Java5" className="DoStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.4/@hasRule.16/@match.0/@class.0" target="//@source.4/@hasRule.16/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="doCondition"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=")"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.16/@apply/@class.0" target="//@source.4/@hasRule.16/@apply/@class.1"/>
        <association associationName="next" source="//@source.4/@hasRule.16/@apply/@class.1" target="//@source.4/@hasRule.16/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.16/@apply/@class.0" sourceClass="//@source.4/@hasRule.16/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.16/@apply/@class.1" sourceClass="//@source.4/@hasRule.16/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="DoStatementBlock">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.DoStatement" packageName="Java5" className="DoStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Block" packageName="Java5" className="Block"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="body" source="//@source.4/@hasRule.17/@match.0/@class.0" target="//@source.4/@hasRule.17/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="doStatement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.17/@apply/@class.0" target="//@source.4/@hasRule.17/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.17/@apply/@class.0" sourceClass="//@source.4/@hasRule.17/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.17/@apply/@class.1" sourceClass="//@source.4/@hasRule.17/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="DoStatementNoBlock">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.DoStatement" packageName="Java5" className="DoStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Statement" packageName="Java5" className="Statement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="body" source="//@source.4/@hasRule.18/@match.0/@class.0" target="//@source.4/@hasRule.18/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="doStatement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="tabbed">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content"/>
        <association associationName="preLine" source="//@source.4/@hasRule.18/@apply/@class.3" target="//@source.4/@hasRule.18/@apply/@class.1"/>
        <association associationName="innerBlock" source="//@source.4/@hasRule.18/@apply/@class.4" target="//@source.4/@hasRule.18/@apply/@class.3"/>
        <association associationName="content" source="//@source.4/@hasRule.18/@apply/@class.0" target="//@source.4/@hasRule.18/@apply/@class.4"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.4/@hasRule.18/@apply/@class.2" sourceClass="//@source.4/@hasRule.18/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.18/@apply/@class.0" sourceClass="//@source.4/@hasRule.18/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.18/@apply/@class.1" sourceClass="//@source.4/@hasRule.18/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="SwitchStatementCondition">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.SwitchStatement" packageName="Java5" className="SwitchStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.4/@hasRule.19/@match.0/@class.0" target="//@source.4/@hasRule.19/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="switchCondition"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=")"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.19/@apply/@class.0" target="//@source.4/@hasRule.19/@apply/@class.1"/>
        <association associationName="next" source="//@source.4/@hasRule.19/@apply/@class.1" target="//@source.4/@hasRule.19/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.19/@apply/@class.0" sourceClass="//@source.4/@hasRule.19/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.19/@apply/@class.1" sourceClass="//@source.4/@hasRule.19/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="SwitchStatement Block">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.SwitchStatement" packageName="Java5" className="SwitchStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Statement" packageName="Java5" className="Statement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="statements" source="//@source.4/@hasRule.20/@match.0/@class.0" target="//@source.4/@hasRule.20/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <association associationName="innerLine" source="//@source.4/@hasRule.20/@apply/@class.0" target="//@source.4/@hasRule.20/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.20/@apply/@class.0" sourceClass="//@source.4/@hasRule.20/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.20/@apply/@class.1" sourceClass="//@source.4/@hasRule.20/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="SwitchCaseCondition">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.SwitchCase" packageName="Java5" className="SwitchCase"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.4/@hasRule.21/@match.0/@class.0" target="//@source.4/@hasRule.21/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="caseCondition"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=":"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.21/@apply/@class.0" target="//@source.4/@hasRule.21/@apply/@class.1"/>
        <association associationName="next" source="//@source.4/@hasRule.21/@apply/@class.1" target="//@source.4/@hasRule.21/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.21/@apply/@class.0" sourceClass="//@source.4/@hasRule.21/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.21/@apply/@class.1" sourceClass="//@source.4/@hasRule.21/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="ThrowStatement">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ThrowStatement" packageName="Java5" className="ThrowStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.4/@hasRule.22/@match.0/@class.0" target="//@source.4/@hasRule.22/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="throw "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.4/@hasRule.22/@apply/@class.0" target="//@source.4/@hasRule.22/@apply/@class.2"/>
        <association associationName="content" source="//@source.4/@hasRule.22/@apply/@class.2" target="//@source.4/@hasRule.22/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.22/@apply/@class.0" sourceClass="//@source.4/@hasRule.22/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.4/@hasRule.22/@apply/@class.1" sourceClass="//@source.4/@hasRule.22/@match.0/@class.1"/>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" name="output5" description="Package and Methods Relations" previousSource="//@source.4">
    <metaModelId metaModelURI="tests\t13\text.ecore" metaModelName="Text.Text"/>
    <hasRule description="Package Declaration">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PackageDeclaration" packageName="Java5" className="PackageDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PackageDeclaration" packageName="Java5" className="PackageDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AbstractTypeDeclaration" packageName="Java5" className="AbstractTypeDeclaration"/>
        <association xsi:type="dsltrans:PositiveIndirectAssociation" source="//@source.5/@hasRule.0/@match.0/@class.0" target="//@source.5/@hasRule.0/@match.0/@class.2"/>
        <association xsi:type="dsltrans:PositiveIndirectAssociation" source="//@source.5/@hasRule.0/@match.0/@class.1" target="//@source.5/@hasRule.0/@match.0/@class.2"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="ownedPackages" source="//@source.5/@hasRule.0/@match.0/@class.0" target="//@source.5/@hasRule.0/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="packageName"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="packageName"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="."/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.5/@hasRule.0/@apply/@class.0" target="//@source.5/@hasRule.0/@apply/@class.2"/>
        <association associationName="content" source="//@source.5/@hasRule.0/@apply/@class.2" target="//@source.5/@hasRule.0/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.0/@apply/@class.0" sourceClass="//@source.5/@hasRule.0/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.0/@apply/@class.1" sourceClass="//@source.5/@hasRule.0/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.0/@apply/@class.1" sourceClass="//@source.5/@hasRule.0/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.0/@apply/@class.0" sourceClass="//@source.5/@hasRule.0/@match.0/@class.2"/>
    </hasRule>
    <hasRule description="Method Declaration Parameters">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.SingleVariableDeclaration" packageName="Java5" className="SingleVariableDeclaration">
          <attribute attributeName="name"/>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodDeclaration" packageName="Java5" className="MethodDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="parameters" source="//@source.5/@hasRule.1/@match.0/@class.1" target="//@source.5/@hasRule.1/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:Atom" value=" "/>
              <rightTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.5/@hasRule.1/@match.0/@class.0/@attribute.0"/>
            </attributeValue>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="parameterNameStart"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="parameterNameStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="parameterSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="parameterType"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="parameterType"/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.5/@hasRule.1/@apply/@class.1" target="//@source.5/@hasRule.1/@apply/@class.2"/>
        <association associationName="next" source="//@source.5/@hasRule.1/@apply/@class.2" target="//@source.5/@hasRule.1/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.1/@apply/@class.1" sourceClass="//@source.5/@hasRule.1/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Method Declaration No Body">
      <match>
        <class xsi:type="dsltrans:NegativeMatchClass" description="Java5.Block" packageName="Java5" className="Block"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodDeclaration" packageName="Java5" className="MethodDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:NegativeMatchAssociation" associationName="body" source="//@source.5/@hasRule.2/@match.0/@class.1" target="//@source.5/@hasRule.2/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="parameterEnd"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.5/@hasRule.2/@apply/@class.0" target="//@source.5/@hasRule.2/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.2/@apply/@class.0" sourceClass="//@source.5/@hasRule.2/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Method Declaration Block">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.Block" packageName="Java5" className="Block"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodDeclaration" packageName="Java5" className="MethodDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="body" source="//@source.5/@hasRule.3/@match.0/@class.1" target="//@source.5/@hasRule.3/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodDeclaration"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block"/>
        <association associationName="content" source="//@source.5/@hasRule.3/@apply/@class.2" target="//@source.5/@hasRule.3/@apply/@class.1"/>
        <association associationName="innerBlock" source="//@source.5/@hasRule.3/@apply/@class.0" target="//@source.5/@hasRule.3/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.3/@apply/@class.0" sourceClass="//@source.5/@hasRule.3/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.3/@apply/@class.1" sourceClass="//@source.5/@hasRule.3/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="Method Declaration Throws">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.SingleVariableDeclaration" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodDeclaration" packageName="Java5" className="MethodDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="thrownExceptions" source="//@source.5/@hasRule.4/@match.0/@class.1" target="//@source.5/@hasRule.4/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="parameterEnd"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" throws "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="throwStart"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="throwStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.5/@hasRule.4/@apply/@class.0" target="//@source.5/@hasRule.4/@apply/@class.1"/>
        <association associationName="content" source="//@source.5/@hasRule.4/@apply/@class.2" target="//@source.5/@hasRule.4/@apply/@class.3"/>
        <association associationName="next" source="//@source.5/@hasRule.4/@apply/@class.1" target="//@source.5/@hasRule.4/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.4/@apply/@class.0" sourceClass="//@source.5/@hasRule.4/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.4/@apply/@class.3" sourceClass="//@source.5/@hasRule.4/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="Method Invocation Arguments">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodInvocation" packageName="Java5" className="MethodInvocation"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="arguments" source="//@source.5/@hasRule.5/@match.0/@class.1" target="//@source.5/@hasRule.5/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="argumentStart"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="argumentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.5/@hasRule.5/@apply/@class.1" target="//@source.5/@hasRule.5/@apply/@class.0"/>
        <association associationName="content" source="//@source.5/@hasRule.5/@apply/@class.0" target="//@source.5/@hasRule.5/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.5/@apply/@class.1" sourceClass="//@source.5/@hasRule.5/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.5/@apply/@class.2" sourceClass="//@source.5/@hasRule.5/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ClassInstanceCreation Arguments">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ClassInstanceCreation" packageName="Java5" className="ClassInstanceCreation"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="arguments" source="//@source.5/@hasRule.6/@match.0/@class.1" target="//@source.5/@hasRule.6/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="argumentStart"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="argumentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.5/@hasRule.6/@apply/@class.1" target="//@source.5/@hasRule.6/@apply/@class.0"/>
        <association associationName="content" source="//@source.5/@hasRule.6/@apply/@class.0" target="//@source.5/@hasRule.6/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.6/@apply/@class.1" sourceClass="//@source.5/@hasRule.6/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.6/@apply/@class.2" sourceClass="//@source.5/@hasRule.6/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="FieldDeclaration Fragments">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.VariableDeclaration" packageName="Java5" className="VariableDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.FieldDeclaration" packageName="Java5" className="FieldDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="fragments" source="//@source.5/@hasRule.7/@match.0/@class.1" target="//@source.5/@hasRule.7/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentStart"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="variableDeclaration"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.5/@hasRule.7/@apply/@class.1" target="//@source.5/@hasRule.7/@apply/@class.0"/>
        <association associationName="content" source="//@source.5/@hasRule.7/@apply/@class.0" target="//@source.5/@hasRule.7/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.7/@apply/@class.1" sourceClass="//@source.5/@hasRule.7/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.7/@apply/@class.2" sourceClass="//@source.5/@hasRule.7/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="VariableDeclarationStatement Fragments">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.VariableDeclaration" packageName="Java5" className="VariableDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationStatement" packageName="Java5" className="VariableDeclarationStatement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="fragments" source="//@source.5/@hasRule.8/@match.0/@class.1" target="//@source.5/@hasRule.8/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentStart"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="variableDeclaration"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.5/@hasRule.8/@apply/@class.1" target="//@source.5/@hasRule.8/@apply/@class.0"/>
        <association associationName="content" source="//@source.5/@hasRule.8/@apply/@class.0" target="//@source.5/@hasRule.8/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.8/@apply/@class.1" sourceClass="//@source.5/@hasRule.8/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.8/@apply/@class.2" sourceClass="//@source.5/@hasRule.8/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="VariableDeclarationExpression Fragments">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.VariableDeclaration" packageName="Java5" className="VariableDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationExpression" packageName="Java5" className="VariableDeclarationExpression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="fragments" source="//@source.5/@hasRule.9/@match.0/@class.1" target="//@source.5/@hasRule.9/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentStart"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="variableDeclaration"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.5/@hasRule.9/@apply/@class.1" target="//@source.5/@hasRule.9/@apply/@class.0"/>
        <association associationName="content" source="//@source.5/@hasRule.9/@apply/@class.0" target="//@source.5/@hasRule.9/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.9/@apply/@class.1" sourceClass="//@source.5/@hasRule.9/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.9/@apply/@class.2" sourceClass="//@source.5/@hasRule.9/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ForStatement Initializers">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ForStatement" packageName="Java5" className="ForStatement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="initializers" source="//@source.5/@hasRule.10/@match.0/@class.1" target="//@source.5/@hasRule.10/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="initStart"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="initStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="initSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.5/@hasRule.10/@apply/@class.1" target="//@source.5/@hasRule.10/@apply/@class.0"/>
        <association associationName="content" source="//@source.5/@hasRule.10/@apply/@class.0" target="//@source.5/@hasRule.10/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.10/@apply/@class.1" sourceClass="//@source.5/@hasRule.10/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.10/@apply/@class.2" sourceClass="//@source.5/@hasRule.10/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ForStatement Updaters">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ForStatement" packageName="Java5" className="ForStatement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="updaters" source="//@source.5/@hasRule.11/@match.0/@class.1" target="//@source.5/@hasRule.11/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="updStart"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="updStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="updSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.5/@hasRule.11/@apply/@class.1" target="//@source.5/@hasRule.11/@apply/@class.0"/>
        <association associationName="content" source="//@source.5/@hasRule.11/@apply/@class.0" target="//@source.5/@hasRule.11/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.11/@apply/@class.1" sourceClass="//@source.5/@hasRule.11/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.11/@apply/@class.2" sourceClass="//@source.5/@hasRule.11/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ConstructorInvocation Arguments">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ConstructorInvocation" packageName="Java5" className="ConstructorInvocation"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="arguments" source="//@source.5/@hasRule.12/@match.0/@class.1" target="//@source.5/@hasRule.12/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="argumentStart"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="argumentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.5/@hasRule.12/@apply/@class.1" target="//@source.5/@hasRule.12/@apply/@class.0"/>
        <association associationName="content" source="//@source.5/@hasRule.12/@apply/@class.0" target="//@source.5/@hasRule.12/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.12/@apply/@class.1" sourceClass="//@source.5/@hasRule.12/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.12/@apply/@class.2" sourceClass="//@source.5/@hasRule.12/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="SuperConstructorInvocation Arguments">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.SuperConstructorInvocation" packageName="Java5" className="SuperConstructorInvocation"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="arguments" source="//@source.5/@hasRule.13/@match.0/@class.1" target="//@source.5/@hasRule.13/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="argumentStart"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="argumentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="arguments"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.5/@hasRule.13/@apply/@class.1" target="//@source.5/@hasRule.13/@apply/@class.0"/>
        <association associationName="content" source="//@source.5/@hasRule.13/@apply/@class.0" target="//@source.5/@hasRule.13/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.13/@apply/@class.1" sourceClass="//@source.5/@hasRule.13/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.5/@hasRule.13/@apply/@class.2" sourceClass="//@source.5/@hasRule.13/@match.0/@class.0"/>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" name="output6" description="Modifiers" previousSource="//@source.5">
    <metaModelId metaModelURI="tests\t13\text.ecore" metaModelName="Text.Text"/>
    <hasRule description="Modifier Visibility on BodyDeclarations">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="visibility">
            <attributeValue xsi:type="dsltrans:isNull" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.BodyDeclaration" packageName="Java5" className="BodyDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.0/@match.0/@class.1" target="//@source.6/@hasRule.0/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.6/@hasRule.0/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Atom" value=" "/>
            </attributeValue>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.0/@apply/@class.1" target="//@source.6/@hasRule.0/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.0/@apply/@class.1" sourceClass="//@source.6/@hasRule.0/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Inheritance on BodyDeclarations">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="inheritance">
            <attributeValue xsi:type="dsltrans:isNull" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.BodyDeclaration" packageName="Java5" className="BodyDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.1/@match.0/@class.1" target="//@source.6/@hasRule.1/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.6/@hasRule.1/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Atom" value=" "/>
            </attributeValue>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.1/@apply/@class.1" target="//@source.6/@hasRule.1/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.1/@apply/@class.1" sourceClass="//@source.6/@hasRule.1/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Static on BodyDeclarations">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="static">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.BodyDeclaration" packageName="Java5" className="BodyDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.2/@match.0/@class.1" target="//@source.6/@hasRule.2/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="static "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.2/@apply/@class.1" target="//@source.6/@hasRule.2/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.2/@apply/@class.1" sourceClass="//@source.6/@hasRule.2/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Synchronized on BodyDeclarations">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="synchronized">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.BodyDeclaration" packageName="Java5" className="BodyDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.3/@match.0/@class.1" target="//@source.6/@hasRule.3/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="synchronized "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.3/@apply/@class.1" target="//@source.6/@hasRule.3/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.3/@apply/@class.1" sourceClass="//@source.6/@hasRule.3/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Native on BodyDeclarations">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="native">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.BodyDeclaration" packageName="Java5" className="BodyDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.4/@match.0/@class.1" target="//@source.6/@hasRule.4/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="native "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.4/@apply/@class.1" target="//@source.6/@hasRule.4/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.4/@apply/@class.1" sourceClass="//@source.6/@hasRule.4/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Volatile on BodyDeclarations">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="volatile">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.BodyDeclaration" packageName="Java5" className="BodyDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.5/@match.0/@class.1" target="//@source.6/@hasRule.5/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="volatile "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.5/@apply/@class.1" target="//@source.6/@hasRule.5/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.5/@apply/@class.1" sourceClass="//@source.6/@hasRule.5/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Transient on BodyDeclarations">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="transient">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.BodyDeclaration" packageName="Java5" className="BodyDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.6/@match.0/@class.1" target="//@source.6/@hasRule.6/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="transient "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.6/@apply/@class.1" target="//@source.6/@hasRule.6/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.6/@apply/@class.1" sourceClass="//@source.6/@hasRule.6/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Visibility on VariableDeclarationStatements">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="visibility">
            <attributeValue xsi:type="dsltrans:isNull" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationStatement" packageName="Java5" className="VariableDeclarationStatement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.7/@match.0/@class.1" target="//@source.6/@hasRule.7/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.6/@hasRule.7/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Atom" value=" "/>
            </attributeValue>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.7/@apply/@class.1" target="//@source.6/@hasRule.7/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.7/@apply/@class.1" sourceClass="//@source.6/@hasRule.7/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Inheritance on VariableDeclarationStatements">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="inheritance">
            <attributeValue xsi:type="dsltrans:isNull" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationStatement" packageName="Java5" className="VariableDeclarationStatement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.8/@match.0/@class.1" target="//@source.6/@hasRule.8/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.6/@hasRule.8/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Atom" value=" "/>
            </attributeValue>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.8/@apply/@class.1" target="//@source.6/@hasRule.8/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.8/@apply/@class.1" sourceClass="//@source.6/@hasRule.8/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Static on VariableDeclarationStatements">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="static">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationStatement" packageName="Java5" className="VariableDeclarationStatement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.9/@match.0/@class.1" target="//@source.6/@hasRule.9/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="static "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.9/@apply/@class.1" target="//@source.6/@hasRule.9/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.9/@apply/@class.1" sourceClass="//@source.6/@hasRule.9/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Synchronized on VariableDeclarationStatements">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="synchronized">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationStatement" packageName="Java5" className="VariableDeclarationStatement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.10/@match.0/@class.1" target="//@source.6/@hasRule.10/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="synchronized "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.10/@apply/@class.1" target="//@source.6/@hasRule.10/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.10/@apply/@class.1" sourceClass="//@source.6/@hasRule.10/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Native on VariableDeclarationStatements">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="native">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationStatement" packageName="Java5" className="VariableDeclarationStatement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.11/@match.0/@class.1" target="//@source.6/@hasRule.11/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="native "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.11/@apply/@class.1" target="//@source.6/@hasRule.11/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.11/@apply/@class.1" sourceClass="//@source.6/@hasRule.11/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Volatile on VariableDeclarationStatements">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="volatile">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationStatement" packageName="Java5" className="VariableDeclarationStatement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.12/@match.0/@class.1" target="//@source.6/@hasRule.12/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="volatile "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.12/@apply/@class.1" target="//@source.6/@hasRule.12/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.12/@apply/@class.1" sourceClass="//@source.6/@hasRule.12/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Transient on VariableDeclarationStatements">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="transient">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationStatement" packageName="Java5" className="VariableDeclarationStatement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.13/@match.0/@class.1" target="//@source.6/@hasRule.13/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="transient "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.13/@apply/@class.1" target="//@source.6/@hasRule.13/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.13/@apply/@class.1" sourceClass="//@source.6/@hasRule.13/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Visibility on VariableDeclarationExpressions">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="visibility">
            <attributeValue xsi:type="dsltrans:isNull" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationExpression" packageName="Java5" className="VariableDeclarationExpression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.14/@match.0/@class.1" target="//@source.6/@hasRule.14/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.6/@hasRule.14/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Atom" value=" "/>
            </attributeValue>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.14/@apply/@class.1" target="//@source.6/@hasRule.14/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.14/@apply/@class.1" sourceClass="//@source.6/@hasRule.14/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Inheritance on VariableDeclarationExpressions">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="inheritance">
            <attributeValue xsi:type="dsltrans:isNull" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationExpression" packageName="Java5" className="VariableDeclarationExpression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.15/@match.0/@class.1" target="//@source.6/@hasRule.15/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.6/@hasRule.15/@match.0/@class.0/@attribute.0"/>
              <rightTerm xsi:type="dsltrans:Atom" value=" "/>
            </attributeValue>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.15/@apply/@class.1" target="//@source.6/@hasRule.15/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.15/@apply/@class.1" sourceClass="//@source.6/@hasRule.15/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Static on VariableDeclarationExpressions">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="static">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationExpression" packageName="Java5" className="VariableDeclarationExpression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.16/@match.0/@class.1" target="//@source.6/@hasRule.16/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="static "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.16/@apply/@class.1" target="//@source.6/@hasRule.16/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.16/@apply/@class.1" sourceClass="//@source.6/@hasRule.16/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Synchronized on VariableDeclarationExpressions">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="synchronized">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationExpression" packageName="Java5" className="VariableDeclarationExpression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.17/@match.0/@class.1" target="//@source.6/@hasRule.17/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="synchronized "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.17/@apply/@class.1" target="//@source.6/@hasRule.17/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.17/@apply/@class.1" sourceClass="//@source.6/@hasRule.17/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Native on VariableDeclarationExpressions">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="native">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationExpression" packageName="Java5" className="VariableDeclarationExpression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.18/@match.0/@class.1" target="//@source.6/@hasRule.18/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="native "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.18/@apply/@class.1" target="//@source.6/@hasRule.18/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.18/@apply/@class.1" sourceClass="//@source.6/@hasRule.18/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Volatile on VariableDeclarationExpressions">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="volatile">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationExpression" packageName="Java5" className="VariableDeclarationExpression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.19/@match.0/@class.1" target="//@source.6/@hasRule.19/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="volatile "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.19/@apply/@class.1" target="//@source.6/@hasRule.19/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.19/@apply/@class.1" sourceClass="//@source.6/@hasRule.19/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Modifier Transient on VariableDeclarationExpressions">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Modifier" packageName="Java5" className="Modifier">
          <attribute attributeName="transient">
            <attributeValue xsi:type="dsltrans:Atom" value="true"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationExpression" packageName="Java5" className="VariableDeclarationExpression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="modifiers" source="//@source.6/@hasRule.20/@match.0/@class.1" target="//@source.6/@hasRule.20/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="transient "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="modifierSet"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.6/@hasRule.20/@apply/@class.1" target="//@source.6/@hasRule.20/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.6/@hasRule.20/@apply/@class.1" sourceClass="//@source.6/@hasRule.20/@match.0/@class.1"/>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" name="output7" description="Package and Expressions" previousSource="//@source.6">
    <metaModelId metaModelURI="tests\t13\text.ecore" metaModelName="Text.Text"/>
    <hasRule description="Package Name Block">
      <match>
        <class xsi:type="dsltrans:NegativeMatchClass" description="Java5.PackageDeclaration" packageName="Java5" className="PackageDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.PackageDeclaration" packageName="Java5" className="PackageDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AbstractTypeDeclaration" packageName="Java5" className="AbstractTypeDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:NegativeMatchAssociation" associationName="ownedPackages" source="//@source.7/@hasRule.0/@match.0/@class.0" target="//@source.7/@hasRule.0/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveIndirectAssociation" source="//@source.7/@hasRule.0/@match.0/@class.1" target="//@source.7/@hasRule.0/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="packageName"/>
          </attribute>
        </class>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="main"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="package "/>
          </attribute>
        </class>
        <association associationName="preLine" source="//@source.7/@hasRule.0/@apply/@class.1" target="//@source.7/@hasRule.0/@apply/@class.3"/>
        <association associationName="content" source="//@source.7/@hasRule.0/@apply/@class.3" target="//@source.7/@hasRule.0/@apply/@class.0"/>
        <association associationName="content" source="//@source.7/@hasRule.0/@apply/@class.3" target="//@source.7/@hasRule.0/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.7/@hasRule.0/@apply/@class.0" sourceClass="//@source.7/@hasRule.0/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.7/@hasRule.0/@apply/@class.0" sourceClass="//@source.7/@hasRule.0/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.7/@hasRule.0/@apply/@class.1" sourceClass="//@source.7/@hasRule.0/@match.0/@class.2"/>
    </hasRule>
    <hasRule description="Block">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Block" packageName="Java5" className="Block"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Statement" packageName="Java5" className="Statement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="statements" source="//@source.7/@hasRule.1/@match.0/@class.0" target="//@source.7/@hasRule.1/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="innerBlock"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <association associationName="innerLine" source="//@source.7/@hasRule.1/@apply/@class.0" target="//@source.7/@hasRule.1/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.7/@hasRule.1/@apply/@class.0" sourceClass="//@source.7/@hasRule.1/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.7/@hasRule.1/@apply/@class.1" sourceClass="//@source.7/@hasRule.1/@match.0/@class.1"/>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" name="output8" description="Type Declaration Header I" previousSource="//@source.7">
    <metaModelId metaModelURI="tests\t13\text.ecore" metaModelName="Text.Text"/>
    <hasRule description="ClassDeclaration">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ClassDeclaration" packageName="Java5" className="ClassDeclaration">
          <attribute attributeName="name"/>
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="typeId"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:Atom" value="class "/>
              <rightTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.8/@hasRule.0/@match.0/@class.0/@attribute.0"/>
            </attributeValue>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="typeId"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="typeDeclaration"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.0/@apply/@class.1" target="//@source.8/@hasRule.0/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.0/@apply/@class.1" sourceClass="//@source.8/@hasRule.0/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="InterfaceDeclaration">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.InterfaceDeclaration" packageName="Java5" className="InterfaceDeclaration">
          <attribute attributeName="name"/>
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="typeId"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:Atom" value="interface "/>
              <rightTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.8/@hasRule.1/@match.0/@class.0/@attribute.0"/>
            </attributeValue>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="typeId"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="typeDeclaration"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.1/@apply/@class.1" target="//@source.8/@hasRule.1/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.1/@apply/@class.1" sourceClass="//@source.8/@hasRule.1/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="Gather Import Information">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ImportDeclaration" packageName="Java5" className="ImportDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AbstractTypeDeclaration" packageName="Java5" className="AbstractTypeDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="imports" source="//@source.8/@hasRule.2/@match.0/@class.2" target="//@source.8/@hasRule.2/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="importedElement" source="//@source.8/@hasRule.2/@match.0/@class.1" target="//@source.8/@hasRule.2/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Block" packageName="Text" className="Block">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="importBlock"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="import "/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="importTermination"/>
          </attribute>
        </class>
        <association associationName="innerLine" source="//@source.8/@hasRule.2/@apply/@class.0" target="//@source.8/@hasRule.2/@apply/@class.1"/>
        <association associationName="content" source="//@source.8/@hasRule.2/@apply/@class.1" target="//@source.8/@hasRule.2/@apply/@class.2"/>
        <association associationName="content" source="//@source.8/@hasRule.2/@apply/@class.1" target="//@source.8/@hasRule.2/@apply/@class.3"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.2/@apply/@class.0" sourceClass="//@source.8/@hasRule.2/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.2/@apply/@class.2" sourceClass="//@source.8/@hasRule.2/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.2/@apply/@class.3" sourceClass="//@source.8/@hasRule.2/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Implement Set">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ClassDeclaration" packageName="Java5" className="ClassDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="superInterfaces" source="//@source.8/@hasRule.3/@match.0/@class.1" target="//@source.8/@hasRule.3/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="implementSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="implementDirective"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" implements "/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="implementDirective"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.3/@apply/@class.0" target="//@source.8/@hasRule.3/@apply/@class.1"/>
        <association associationName="content" source="//@source.8/@hasRule.3/@apply/@class.1" target="//@source.8/@hasRule.3/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.3/@apply/@class.0" sourceClass="//@source.8/@hasRule.3/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.3/@apply/@class.2" sourceClass="//@source.8/@hasRule.3/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="Implement Set">
      <match>
        <class xsi:type="dsltrans:ExistsMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.InterfaceDeclaration" packageName="Java5" className="InterfaceDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="superInterfaces" source="//@source.8/@hasRule.4/@match.0/@class.1" target="//@source.8/@hasRule.4/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="implementSet"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="extends"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" extends "/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="extends"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.4/@apply/@class.0" target="//@source.8/@hasRule.4/@apply/@class.1"/>
        <association associationName="content" source="//@source.8/@hasRule.4/@apply/@class.1" target="//@source.8/@hasRule.4/@apply/@class.2"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.4/@apply/@class.0" sourceClass="//@source.8/@hasRule.4/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.4/@apply/@class.2" sourceClass="//@source.8/@hasRule.4/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ReturnType">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodDeclaration" packageName="Java5" className="MethodDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="returnType" source="//@source.8/@hasRule.5/@match.0/@class.1" target="//@source.8/@hasRule.5/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodReturnType"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.5/@apply/@class.0" target="//@source.8/@hasRule.5/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.5/@apply/@class.1" sourceClass="//@source.8/@hasRule.5/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.5/@apply/@class.0" sourceClass="//@source.8/@hasRule.5/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Method Declaration Parameters">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodDeclaration" packageName="Java5" className="MethodDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.SingleVariableDeclaration" packageName="Java5" className="SingleVariableDeclaration">
          <attribute attributeName="name"/>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="parameters" source="//@source.8/@hasRule.6/@match.0/@class.0" target="//@source.8/@hasRule.6/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:Atom" value=" "/>
              <rightTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.8/@hasRule.6/@match.0/@class.1/@attribute.0"/>
            </attributeValue>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="parameterName"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="parameterName"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="parameterNameStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="parameterType"/>
          </attribute>
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=", "/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="parameterType"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.6/@apply/@class.1" target="//@source.8/@hasRule.6/@apply/@class.2"/>
        <association associationName="next" source="//@source.8/@hasRule.6/@apply/@class.2" target="//@source.8/@hasRule.6/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.8/@hasRule.6/@apply/@class.1" sourceClass="//@source.8/@hasRule.6/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.6/@apply/@class.1" sourceClass="//@source.8/@hasRule.6/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="Method Declaration Throws">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodDeclaration" packageName="Java5" className="MethodDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="thrownExceptions" source="//@source.8/@hasRule.7/@match.0/@class.0" target="//@source.8/@hasRule.7/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="thrownExceptions" source="//@source.8/@hasRule.7/@match.0/@class.0" target="//@source.8/@hasRule.7/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="throwStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=", "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.7/@apply/@class.1" target="//@source.8/@hasRule.7/@apply/@class.2"/>
        <association associationName="next" source="//@source.8/@hasRule.7/@apply/@class.2" target="//@source.8/@hasRule.7/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.8/@hasRule.7/@apply/@class.1" sourceClass="//@source.8/@hasRule.7/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.7/@apply/@class.1" sourceClass="//@source.8/@hasRule.7/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.7/@apply/@class.0" sourceClass="//@source.8/@hasRule.7/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.7/@apply/@class.1" sourceClass="//@source.8/@hasRule.7/@match.0/@class.2"/>
    </hasRule>
    <hasRule description="Method Invocation Name">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodInvocation" packageName="Java5" className="MethodInvocation"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="method" source="//@source.8/@hasRule.8/@match.0/@class.1" target="//@source.8/@hasRule.8/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodName"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.8/@apply/@class.0" target="//@source.8/@hasRule.8/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.8/@apply/@class.1" sourceClass="//@source.8/@hasRule.8/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.8/@apply/@class.0" sourceClass="//@source.8/@hasRule.8/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="ClassInstanceCreation Name">
      <match>
        <class xsi:type="dsltrans:NegativeMatchClass" description="Java5.AnonymousClassDeclaration" packageName="Java5" className="AnonymousClassDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ClassInstanceCreation" packageName="Java5" className="ClassInstanceCreation"/>
        <association xsi:type="dsltrans:NegativeMatchAssociation" associationName="anonymousClassDeclaration" source="//@source.8/@hasRule.9/@match.0/@class.2" target="//@source.8/@hasRule.9/@match.0/@class.0"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="method" source="//@source.8/@hasRule.9/@match.0/@class.2" target="//@source.8/@hasRule.9/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="methodName"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.9/@apply/@class.0" target="//@source.8/@hasRule.9/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.9/@apply/@class.1" sourceClass="//@source.8/@hasRule.9/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.9/@apply/@class.0" sourceClass="//@source.8/@hasRule.9/@match.0/@class.2"/>
    </hasRule>
    <hasRule description="ClassInstanceCreation AnonymousClassDeclaration">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ClassInstanceCreation" packageName="Java5" className="ClassInstanceCreation"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.AnonymousClassDeclaration" packageName="Java5" className="AnonymousClassDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.8/@hasRule.10/@match.0/@class.1" target="//@source.8/@hasRule.10/@match.0/@class.0"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="anonymousClassDeclaration" source="//@source.8/@hasRule.10/@match.0/@class.1" target="//@source.8/@hasRule.10/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="typeName"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.10/@apply/@class.0" target="//@source.8/@hasRule.10/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.10/@apply/@class.1" sourceClass="//@source.8/@hasRule.10/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.10/@apply/@class.0" sourceClass="//@source.8/@hasRule.10/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Method Sender">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodInvocation" packageName="Java5" className="MethodInvocation"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="expression" source="//@source.8/@hasRule.11/@match.0/@class.1" target="//@source.8/@hasRule.11/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="objectSender"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value="."/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content"/>
        <association associationName="next" source="//@source.8/@hasRule.11/@apply/@class.3" target="//@source.8/@hasRule.11/@apply/@class.2"/>
        <association associationName="content" source="//@source.8/@hasRule.11/@apply/@class.0" target="//@source.8/@hasRule.11/@apply/@class.3"/>
        <association associationName="content" source="//@source.8/@hasRule.11/@apply/@class.3" target="//@source.8/@hasRule.11/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.11/@apply/@class.1" sourceClass="//@source.8/@hasRule.11/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.11/@apply/@class.0" sourceClass="//@source.8/@hasRule.11/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="Method Invocation Arguments">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.MethodInvocation" packageName="Java5" className="MethodInvocation"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="arguments" source="//@source.8/@hasRule.12/@match.0/@class.0" target="//@source.8/@hasRule.12/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="arguments" source="//@source.8/@hasRule.12/@match.0/@class.0" target="//@source.8/@hasRule.12/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="argumentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=", "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.12/@apply/@class.1" target="//@source.8/@hasRule.12/@apply/@class.2"/>
        <association associationName="next" source="//@source.8/@hasRule.12/@apply/@class.2" target="//@source.8/@hasRule.12/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.8/@hasRule.12/@apply/@class.1" sourceClass="//@source.8/@hasRule.12/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.12/@apply/@class.1" sourceClass="//@source.8/@hasRule.12/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.12/@apply/@class.0" sourceClass="//@source.8/@hasRule.12/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.12/@apply/@class.1" sourceClass="//@source.8/@hasRule.12/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ClassInstanceCreation Arguments">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ClassInstanceCreation" packageName="Java5" className="ClassInstanceCreation"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="arguments" source="//@source.8/@hasRule.13/@match.0/@class.0" target="//@source.8/@hasRule.13/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="arguments" source="//@source.8/@hasRule.13/@match.0/@class.0" target="//@source.8/@hasRule.13/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="argumentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=", "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.13/@apply/@class.1" target="//@source.8/@hasRule.13/@apply/@class.2"/>
        <association associationName="next" source="//@source.8/@hasRule.13/@apply/@class.2" target="//@source.8/@hasRule.13/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.8/@hasRule.13/@apply/@class.1" sourceClass="//@source.8/@hasRule.13/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.13/@apply/@class.1" sourceClass="//@source.8/@hasRule.13/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.13/@apply/@class.0" sourceClass="//@source.8/@hasRule.13/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.13/@apply/@class.1" sourceClass="//@source.8/@hasRule.13/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="FieldType">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.FieldDeclaration" packageName="Java5" className="FieldDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.8/@hasRule.14/@match.0/@class.1" target="//@source.8/@hasRule.14/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fieldType"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.14/@apply/@class.0" target="//@source.8/@hasRule.14/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.14/@apply/@class.1" sourceClass="//@source.8/@hasRule.14/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.14/@apply/@class.0" sourceClass="//@source.8/@hasRule.14/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="FieldDeclaration Fragments">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.FieldDeclaration" packageName="Java5" className="FieldDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclaration" packageName="Java5" className="VariableDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclaration" packageName="Java5" className="VariableDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="fragments" source="//@source.8/@hasRule.15/@match.0/@class.0" target="//@source.8/@hasRule.15/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="fragments" source="//@source.8/@hasRule.15/@match.0/@class.0" target="//@source.8/@hasRule.15/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="variableDeclaration"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=", "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.15/@apply/@class.1" target="//@source.8/@hasRule.15/@apply/@class.2"/>
        <association associationName="next" source="//@source.8/@hasRule.15/@apply/@class.2" target="//@source.8/@hasRule.15/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.8/@hasRule.15/@apply/@class.1" sourceClass="//@source.8/@hasRule.15/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.15/@apply/@class.1" sourceClass="//@source.8/@hasRule.15/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.15/@apply/@class.0" sourceClass="//@source.8/@hasRule.15/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.15/@apply/@class.1" sourceClass="//@source.8/@hasRule.15/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="VariableDeclarationStatement Type">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationStatement" packageName="Java5" className="VariableDeclarationStatement"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.8/@hasRule.16/@match.0/@class.1" target="//@source.8/@hasRule.16/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fieldType"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.16/@apply/@class.0" target="//@source.8/@hasRule.16/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.16/@apply/@class.1" sourceClass="//@source.8/@hasRule.16/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.16/@apply/@class.0" sourceClass="//@source.8/@hasRule.16/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="VariableDeclarationStatement Fragments">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationStatement" packageName="Java5" className="VariableDeclarationStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclaration" packageName="Java5" className="VariableDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclaration" packageName="Java5" className="VariableDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="fragments" source="//@source.8/@hasRule.17/@match.0/@class.0" target="//@source.8/@hasRule.17/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="fragments" source="//@source.8/@hasRule.17/@match.0/@class.0" target="//@source.8/@hasRule.17/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="variableDeclaration"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=", "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.17/@apply/@class.1" target="//@source.8/@hasRule.17/@apply/@class.2"/>
        <association associationName="next" source="//@source.8/@hasRule.17/@apply/@class.2" target="//@source.8/@hasRule.17/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.8/@hasRule.17/@apply/@class.1" sourceClass="//@source.8/@hasRule.17/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.17/@apply/@class.1" sourceClass="//@source.8/@hasRule.17/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.17/@apply/@class.0" sourceClass="//@source.8/@hasRule.17/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.17/@apply/@class.1" sourceClass="//@source.8/@hasRule.17/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="VariableDeclarationExpression Type">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationExpression" packageName="Java5" className="VariableDeclarationExpression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.8/@hasRule.18/@match.0/@class.1" target="//@source.8/@hasRule.18/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fieldType"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.18/@apply/@class.0" target="//@source.8/@hasRule.18/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.18/@apply/@class.1" sourceClass="//@source.8/@hasRule.18/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.18/@apply/@class.0" sourceClass="//@source.8/@hasRule.18/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="VariableDeclarationExpression Fragments">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationExpression" packageName="Java5" className="VariableDeclarationExpression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclaration" packageName="Java5" className="VariableDeclaration"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclaration" packageName="Java5" className="VariableDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="fragments" source="//@source.8/@hasRule.19/@match.0/@class.0" target="//@source.8/@hasRule.19/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="fragments" source="//@source.8/@hasRule.19/@match.0/@class.0" target="//@source.8/@hasRule.19/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="variableDeclaration"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="fragmentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=", "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.19/@apply/@class.1" target="//@source.8/@hasRule.19/@apply/@class.2"/>
        <association associationName="next" source="//@source.8/@hasRule.19/@apply/@class.2" target="//@source.8/@hasRule.19/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.8/@hasRule.19/@apply/@class.1" sourceClass="//@source.8/@hasRule.19/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.19/@apply/@class.1" sourceClass="//@source.8/@hasRule.19/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.19/@apply/@class.0" sourceClass="//@source.8/@hasRule.19/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.19/@apply/@class.1" sourceClass="//@source.8/@hasRule.19/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ForStatement Initializers">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ForStatement" packageName="Java5" className="ForStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="initializers" source="//@source.8/@hasRule.20/@match.0/@class.0" target="//@source.8/@hasRule.20/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="initializers" source="//@source.8/@hasRule.20/@match.0/@class.0" target="//@source.8/@hasRule.20/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="initStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=", "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.20/@apply/@class.1" target="//@source.8/@hasRule.20/@apply/@class.2"/>
        <association associationName="next" source="//@source.8/@hasRule.20/@apply/@class.2" target="//@source.8/@hasRule.20/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.8/@hasRule.20/@apply/@class.1" sourceClass="//@source.8/@hasRule.20/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.20/@apply/@class.1" sourceClass="//@source.8/@hasRule.20/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.20/@apply/@class.0" sourceClass="//@source.8/@hasRule.20/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.20/@apply/@class.1" sourceClass="//@source.8/@hasRule.20/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ForStatement Updaters">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ForStatement" packageName="Java5" className="ForStatement"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="updaters" source="//@source.8/@hasRule.21/@match.0/@class.0" target="//@source.8/@hasRule.21/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="updaters" source="//@source.8/@hasRule.21/@match.0/@class.0" target="//@source.8/@hasRule.21/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="updStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=", "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.21/@apply/@class.1" target="//@source.8/@hasRule.21/@apply/@class.2"/>
        <association associationName="next" source="//@source.8/@hasRule.21/@apply/@class.2" target="//@source.8/@hasRule.21/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.8/@hasRule.21/@apply/@class.1" sourceClass="//@source.8/@hasRule.21/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.21/@apply/@class.1" sourceClass="//@source.8/@hasRule.21/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.21/@apply/@class.0" sourceClass="//@source.8/@hasRule.21/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.21/@apply/@class.1" sourceClass="//@source.8/@hasRule.21/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ExpressionStatement Termination">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ExpressionStatement" packageName="Java5" className="ExpressionStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.8/@hasRule.22/@apply/@class.0" target="//@source.8/@hasRule.22/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.22/@apply/@class.0" sourceClass="//@source.8/@hasRule.22/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ReturnStatement Termination">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ReturnStatement" packageName="Java5" className="ReturnStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.8/@hasRule.23/@apply/@class.0" target="//@source.8/@hasRule.23/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.23/@apply/@class.0" sourceClass="//@source.8/@hasRule.23/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ContinueStatement Termination">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ContinueStatement" packageName="Java5" className="ContinueStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.8/@hasRule.24/@apply/@class.0" target="//@source.8/@hasRule.24/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.24/@apply/@class.0" sourceClass="//@source.8/@hasRule.24/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="BreakStatement Termination">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.BreakStatement" packageName="Java5" className="BreakStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.8/@hasRule.25/@apply/@class.0" target="//@source.8/@hasRule.25/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.25/@apply/@class.0" sourceClass="//@source.8/@hasRule.25/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ThrowStatement Termination">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ThrowStatement" packageName="Java5" className="ThrowStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.8/@hasRule.26/@apply/@class.0" target="//@source.8/@hasRule.26/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.26/@apply/@class.0" sourceClass="//@source.8/@hasRule.26/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="VariableDeclarationStatement Termination">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.VariableDeclarationStatement" packageName="Java5" className="VariableDeclarationStatement"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.8/@hasRule.27/@apply/@class.0" target="//@source.8/@hasRule.27/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.27/@apply/@class.0" sourceClass="//@source.8/@hasRule.27/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ConstructorInvocation Termination">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ConstructorInvocation" packageName="Java5" className="ConstructorInvocation"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.8/@hasRule.28/@apply/@class.0" target="//@source.8/@hasRule.28/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.28/@apply/@class.0" sourceClass="//@source.8/@hasRule.28/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="SuperConstructorInvocation Termination">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.SuperConstructorInvocation" packageName="Java5" className="SuperConstructorInvocation"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="statement"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=";"/>
          </attribute>
        </class>
        <association associationName="next" source="//@source.8/@hasRule.29/@apply/@class.0" target="//@source.8/@hasRule.29/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.29/@apply/@class.0" sourceClass="//@source.8/@hasRule.29/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ConstructorInvocation Arguments">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.ConstructorInvocation" packageName="Java5" className="ConstructorInvocation"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="arguments" source="//@source.8/@hasRule.30/@match.0/@class.0" target="//@source.8/@hasRule.30/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="arguments" source="//@source.8/@hasRule.30/@match.0/@class.0" target="//@source.8/@hasRule.30/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="argumentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=", "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.30/@apply/@class.1" target="//@source.8/@hasRule.30/@apply/@class.2"/>
        <association associationName="next" source="//@source.8/@hasRule.30/@apply/@class.2" target="//@source.8/@hasRule.30/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.8/@hasRule.30/@apply/@class.1" sourceClass="//@source.8/@hasRule.30/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.30/@apply/@class.1" sourceClass="//@source.8/@hasRule.30/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.30/@apply/@class.0" sourceClass="//@source.8/@hasRule.30/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.30/@apply/@class.1" sourceClass="//@source.8/@hasRule.30/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="SuperConstructorInvocation Arguments">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.SuperConstructorInvocation" packageName="Java5" className="SuperConstructorInvocation"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.Expression" packageName="Java5" className="Expression"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="arguments" source="//@source.8/@hasRule.31/@match.0/@class.0" target="//@source.8/@hasRule.31/@match.0/@class.1"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="arguments" source="//@source.8/@hasRule.31/@match.0/@class.0" target="//@source.8/@hasRule.31/@match.0/@class.2"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="argumentStart"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=", "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.31/@apply/@class.1" target="//@source.8/@hasRule.31/@apply/@class.2"/>
        <association associationName="next" source="//@source.8/@hasRule.31/@apply/@class.2" target="//@source.8/@hasRule.31/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.8/@hasRule.31/@apply/@class.1" sourceClass="//@source.8/@hasRule.31/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.31/@apply/@class.1" sourceClass="//@source.8/@hasRule.31/@match.0/@class.2"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.31/@apply/@class.0" sourceClass="//@source.8/@hasRule.31/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.31/@apply/@class.1" sourceClass="//@source.8/@hasRule.31/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="EnumDeclaration">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.EnumDeclaration" packageName="Java5" className="EnumDeclaration">
          <attribute attributeName="name"/>
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Concat">
              <leftTerm xsi:type="dsltrans:Atom" value="enum "/>
              <rightTerm xsi:type="dsltrans:AttributeRef" attributeRef="//@source.8/@hasRule.32/@match.0/@class.0/@attribute.0"/>
            </attributeValue>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="typeDeclaration"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.8/@hasRule.32/@apply/@class.1" target="//@source.8/@hasRule.32/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.8/@hasRule.32/@apply/@class.1" sourceClass="//@source.8/@hasRule.32/@match.0/@class.0"/>
    </hasRule>
  </source>
  <source xsi:type="dsltrans:Sequential" name="output9" description="Type Declaration header II" previousSource="//@source.8" outputFilePathURI="tests\t13\o0.xmi">
    <metaModelId metaModelURI="tests\t13\text.ecore" metaModelName="Text.Text"/>
    <hasRule description="Implements">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.TypeDeclaration" packageName="Java5" className="TypeDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="superInterfaces" source="//@source.9/@hasRule.0/@match.0/@class.0" target="//@source.9/@hasRule.0/@match.0/@class.1"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="implementDirective"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=", "/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.9/@hasRule.0/@apply/@class.0" target="//@source.9/@hasRule.0/@apply/@class.2"/>
        <association associationName="content" source="//@source.9/@hasRule.0/@apply/@class.2" target="//@source.9/@hasRule.0/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:NegativeBackwardRestriction" targetClass="//@source.9/@hasRule.0/@apply/@class.0" sourceClass="//@source.9/@hasRule.0/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.9/@hasRule.0/@apply/@class.1" sourceClass="//@source.9/@hasRule.0/@match.0/@class.1"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.9/@hasRule.0/@apply/@class.0" sourceClass="//@source.9/@hasRule.0/@match.0/@class.0"/>
    </hasRule>
    <hasRule description="ParameterType">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.SingleVariableDeclaration" packageName="Java5" className="SingleVariableDeclaration"/>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="type" source="//@source.9/@hasRule.1/@match.0/@class.1" target="//@source.9/@hasRule.1/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="parameterType"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.9/@hasRule.1/@apply/@class.0" target="//@source.9/@hasRule.1/@apply/@class.1"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.9/@hasRule.1/@apply/@class.1" sourceClass="//@source.9/@hasRule.1/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.9/@hasRule.1/@apply/@class.0" sourceClass="//@source.9/@hasRule.1/@match.0/@class.1"/>
    </hasRule>
    <hasRule description="SuperClass">
      <match>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.NamedElementRef" packageName="Java5" className="NamedElementRef"/>
        <class xsi:type="dsltrans:AnyMatchClass" description="Java5.TypeDeclaration" packageName="Java5" className="TypeDeclaration">
          <attribute attributeName="proxy">
            <attributeValue xsi:type="dsltrans:Atom" value="false"/>
          </attribute>
        </class>
        <association xsi:type="dsltrans:PositiveMatchAssociation" associationName="superClass" source="//@source.9/@hasRule.2/@match.0/@class.1" target="//@source.9/@hasRule.2/@match.0/@class.0"/>
      </match>
      <apply>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="text">
            <attributeValue xsi:type="dsltrans:Atom" value=" extends "/>
          </attribute>
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="extends"/>
          </attribute>
          <attribute>
            <attributeValue xsi:type="dsltrans:Atom" value="extends"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="expression"/>
          </attribute>
        </class>
        <class description="Text.Content" packageName="Text" className="Content">
          <attribute attributeName="name">
            <attributeValue xsi:type="dsltrans:Atom" value="typeId"/>
          </attribute>
        </class>
        <association associationName="content" source="//@source.9/@hasRule.2/@apply/@class.0" target="//@source.9/@hasRule.2/@apply/@class.1"/>
        <association associationName="content" source="//@source.9/@hasRule.2/@apply/@class.2" target="//@source.9/@hasRule.2/@apply/@class.0"/>
      </apply>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.9/@hasRule.2/@apply/@class.1" sourceClass="//@source.9/@hasRule.2/@match.0/@class.0"/>
      <backwards xsi:type="dsltrans:PositiveBackwardRestriction" targetClass="//@source.9/@hasRule.2/@apply/@class.2" sourceClass="//@source.9/@hasRule.2/@match.0/@class.1"/>
    </hasRule>
  </source>
</dsltrans:TransformationModel>
